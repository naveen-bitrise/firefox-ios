// -*- mode: Swift -*-

// AUTOGENERATED BY glean_parser v17.3.0. DO NOT EDIT. DO NOT COMMIT.

#if canImport(Foundation)
    import Foundation
#endif

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
import Glean

// swiftlint:disable superfluous_disable_command
// swiftlint:disable nesting
// swiftlint:disable line_length
// swiftlint:disable identifier_name
// swiftlint:disable force_try

extension GleanMetrics {
    class GleanBuild {
        private init() {
            // Intentionally left private, no external user can instantiate a new global object.
        }

        public static let info = BuildInfo(buildDate: DateComponents(calendar: Calendar.current, timeZone: TimeZone(abbreviation: "UTC"), year: 2025, month: 8, day: 19, hour: 20, minute: 25, second: 8))
    }

    class Pings {
        public static let shared = Pings()
        private init() {
            // Intentionally left private, no external user can instantiate a new global object.
        }

        enum DauReportingReasonCodes: Int, ReasonCodes {
            case active = 0
            case dirtyStartup = 1
            case inactive = 2

            public func index() -> Int {
                return self.rawValue
            }
        }

        /// Minimal ping to measure DAU.
        /// Sent on the baseline schedule.
        /// 
        /// **NOTE**: This ping is deprecated and replaced by the `usage-reporting` ping.
        let dauReporting = Ping<DauReportingReasonCodes>(
            name: "dau-reporting",
            includeClientId: true,
            sendIfEmpty: true,
            preciseTimestamps: true,
            includeInfoSections: true,
            enabled: true,
            schedulesPings: [],
            reasonCodes: ["active", "dirty_startup", "inactive"],
            followsCollectionEnabled: true,
            uploaderCapabilities: []
        )

        /// Recorded on first_session when the user installs the app.
        let firstSession = Ping<NoReasonCodes>(
            name: "first-session",
            includeClientId: true,
            sendIfEmpty: false,
            preciseTimestamps: true,
            includeInfoSections: true,
            enabled: true,
            schedulesPings: [],
            reasonCodes: [],
            followsCollectionEnabled: true,
            uploaderCapabilities: []
        )

        /// A ping for information about Mozilla Account usage. Sent at the same cadence
        /// as the baseline ping.
        /// 
        /// Owner: @jdavis
        let fxAccounts = Ping<NoReasonCodes>(
            name: "fx-accounts",
            includeClientId: true,
            sendIfEmpty: false,
            preciseTimestamps: true,
            includeInfoSections: true,
            enabled: true,
            schedulesPings: [],
            reasonCodes: [],
            followsCollectionEnabled: true,
            uploaderCapabilities: []
        )

        /// A ping representing a single event occurring with or to a Firefox Suggestion.
        /// Distinguishable by its `ping_type`.
        /// Does not contain a `client_id`, preferring a `context_id` instead.
        let fxSuggest = Ping<NoReasonCodes>(
            name: "fx-suggest",
            includeClientId: false,
            sendIfEmpty: false,
            preciseTimestamps: true,
            includeInfoSections: true,
            enabled: true,
            schedulesPings: [],
            reasonCodes: [],
            followsCollectionEnabled: true,
            uploaderCapabilities: []
        )

        /// This ping is submitted by Nimbus code after the enrollment workflow has
        /// completed.
        let nimbus = Ping<NoReasonCodes>(
            name: "nimbus",
            includeClientId: true,
            sendIfEmpty: true,
            preciseTimestamps: true,
            includeInfoSections: true,
            enabled: true,
            schedulesPings: [],
            reasonCodes: [],
            followsCollectionEnabled: true,
            uploaderCapabilities: []
        )

        /// This ping is submitted when a user opts out of
        /// usage-reporting during the onboarding process.
        /// It is sent immediately upon opting out of Telemetry/Usage Tracking (T/UT)
        /// at ToS consent. This ping will only ever be sent during the
        /// initial onboarding flow.
        /// If the global telemetry preference is disabled, this ping
        /// includes specific settings to ensure it can still be submitted.
        let onboardingOptOut = Ping<NoReasonCodes>(
            name: "onboarding-opt-out",
            includeClientId: false,
            sendIfEmpty: true,
            preciseTimestamps: true,
            includeInfoSections: false,
            enabled: false,
            schedulesPings: [],
            reasonCodes: [],
            followsCollectionEnabled: false,
            uploaderCapabilities: []
        )

        /// Recorded when a sponsored top site is rendered and
        /// visible on the newtab page. Visibility is qualified
        /// as when the homepage is brought to the front of the
        /// Browser, and sponsored tiles are 100% visible on screen.
        let topsitesImpression = Ping<NoReasonCodes>(
            name: "topsites-impression",
            includeClientId: false,
            sendIfEmpty: false,
            preciseTimestamps: true,
            includeInfoSections: true,
            enabled: true,
            schedulesPings: [],
            reasonCodes: [],
            followsCollectionEnabled: true,
            uploaderCapabilities: []
        )

        enum UsageDeletionRequestReasonCodes: Int, ReasonCodes {
            case setUploadEnabled = 0

            public func index() -> Int {
                return self.rawValue
            }
        }

        /// This ping is submitted when a user opts out of sending usage
        /// frequency of Firefox to Mozilla.
        /// Sent in response to user action.
        let usageDeletionRequest = Ping<UsageDeletionRequestReasonCodes>(
            name: "usage-deletion-request",
            includeClientId: false,
            sendIfEmpty: true,
            preciseTimestamps: true,
            includeInfoSections: false,
            enabled: false,
            schedulesPings: [],
            reasonCodes: ["set_upload_enabled"],
            followsCollectionEnabled: false,
            uploaderCapabilities: []
        )

        enum UsageReportingReasonCodes: Int, ReasonCodes {
            case active = 0
            case dirtyStartup = 1
            case inactive = 2

            public func index() -> Int {
                return self.rawValue
            }
        }

        /// Minimal ping to measure the usage frequency of Firefox.
        /// Sent on the baseline schedule.
        let usageReporting = Ping<UsageReportingReasonCodes>(
            name: "usage-reporting",
            includeClientId: false,
            sendIfEmpty: true,
            preciseTimestamps: true,
            includeInfoSections: false,
            enabled: false,
            schedulesPings: [],
            reasonCodes: ["active", "dirty_startup", "inactive"],
            followsCollectionEnabled: false,
            uploaderCapabilities: []
        )

    }

    enum AiSummarize {
        struct SummarizationCompletedExtra: EventExtras {
            var connectionType: String?
            var errorType: String?
            var lengthChars: Int32?
            var lengthWords: Int32?
            var model: String?
            var outcome: Bool?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let connectionType = self.connectionType {
                    record["connection_type"] = String(connectionType)
                }
                if let errorType = self.errorType {
                    record["error_type"] = String(errorType)
                }
                if let lengthChars = self.lengthChars {
                    record["length_chars"] = String(lengthChars)
                }
                if let lengthWords = self.lengthWords {
                    record["length_words"] = String(lengthWords)
                }
                if let model = self.model {
                    record["model"] = String(model)
                }
                if let outcome = self.outcome {
                    record["outcome"] = String(outcome)
                }

                return record
            }
        }

        struct SummarizationConsentDisplayedExtra: EventExtras {
            var agreed: Bool?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let agreed = self.agreed {
                    record["agreed"] = String(agreed)
                }

                return record
            }
        }

        struct SummarizationRequestedExtra: EventExtras {
            var trigger: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let trigger = self.trigger {
                    record["trigger"] = String(trigger)
                }

                return record
            }
        }

        struct SummarizationStartedExtra: EventExtras {
            var lengthChars: Int32?
            var lengthWords: Int32?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let lengthChars = self.lengthChars {
                    record["length_chars"] = String(lengthChars)
                }
                if let lengthWords = self.lengthWords {
                    record["length_words"] = String(lengthWords)
                }

                return record
            }
        }

        /// Recorded when the user cancels or closes the summarization at any point.
        static let summarizationClosed = EventMetricType<NoExtras>( // generated from ai.summarize.summarization_closed
            CommonMetricData(
                category: "ai.summarize",
                name: "summarization_closed",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// Recorded when the summarizer service returns the summary or errors out.
        static let summarizationCompleted = EventMetricType<SummarizationCompletedExtra>( // generated from ai.summarize.summarization_completed
            CommonMetricData(
                category: "ai.summarize",
                name: "summarization_completed",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["connection_type", "error_type", "length_chars", "length_words", "model", "outcome"]
        )

        /// Recorded when the user is shown the Terms of Service consent dialogue.
        static let summarizationConsentDisplayed = EventMetricType<SummarizationConsentDisplayedExtra>( // generated from ai.summarize.summarization_consent_displayed
            CommonMetricData(
                category: "ai.summarize",
                name: "summarization_consent_displayed",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["agreed"]
        )

        /// Recorded when the result of the summarization is displayed to the user.
        static let summarizationDisplayed = EventMetricType<NoExtras>( // generated from ai.summarize.summarization_displayed
            CommonMetricData(
                category: "ai.summarize",
                name: "summarization_displayed",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// Recorded the instant the user initiates the summarization.
        /// (e.g. taps menu button, toolbar icon or shakes the device)
        static let summarizationRequested = EventMetricType<SummarizationRequestedExtra>( // generated from ai.summarize.summarization_requested
            CommonMetricData(
                category: "ai.summarize",
                name: "summarization_requested",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["trigger"]
        )

        /// Recorded when the summarizer service starts processing the page's text content.
        static let summarizationStarted = EventMetricType<SummarizationStartedExtra>( // generated from ai.summarize.summarization_started
            CommonMetricData(
                category: "ai.summarize",
                name: "summarization_started",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["length_chars", "length_words"]
        )

        /// Records the total time for generating the summary and showing it to the user.
        /// Starts when the user triggers summarization.
        /// Ends when user sees the result or an error.
        static let summarizationTime = TimingDistributionMetricType( // generated from ai.summarize.summarization_time
            CommonMetricData(
                category: "ai.summarize",
                name: "summarization_time",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
            , .millisecond
        )

    }

    enum UserAiSummarize {
        /// Records if the user has shake to summarize option enabled
        static let shakeGestureEnabled = BooleanMetricType( // generated from user.ai.summarize.shake_gesture_enabled
            CommonMetricData(
                category: "user.ai.summarize",
                name: "shake_gesture_enabled",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Records if the user has summarization enabled.
        static let summarizationEnabled = BooleanMetricType( // generated from user.ai.summarize.summarization_enabled
            CommonMetricData(
                category: "user.ai.summarize",
                name: "summarization_enabled",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

    }

    enum AppIcon {
        /// A user opened a new private tab from long pressing the app icon
        static let newPrivateTabTapped = EventMetricType<NoExtras>( // generated from app_icon.new_private_tab_tapped
            CommonMetricData(
                category: "app_icon",
                name: "new_private_tab_tapped",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

    }

    enum AppMenu {
        struct CloseButtonExtra: EventExtras {
            var isHomepage: Bool?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let isHomepage = self.isHomepage {
                    record["is_homepage"] = String(isHomepage)
                }

                return record
            }
        }

        struct MainMenuOptionSelectedExtra: EventExtras {
            var isHomepage: Bool?
            var option: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let isHomepage = self.isHomepage {
                    record["is_homepage"] = String(isHomepage)
                }
                if let option = self.option {
                    record["option"] = String(option)
                }

                return record
            }
        }

        struct MenuDismissedExtra: EventExtras {
            var isHomepage: Bool?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let isHomepage = self.isHomepage {
                    record["is_homepage"] = String(isHomepage)
                }

                return record
            }
        }

        /// Counts the number of times a user disables Block Images
        /// in the app menu
        static let blockImagesDisabled = CounterMetricType( // generated from app_menu.block_images_disabled
            CommonMetricData(
                category: "app_menu",
                name: "block_images_disabled",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Counts the number of times a user enables Block Images
        /// in the app menu
        static let blockImagesEnabled = CounterMetricType( // generated from app_menu.block_images_enabled
            CommonMetricData(
                category: "app_menu",
                name: "block_images_enabled",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Record event when user has tapped the close menu button.
        static let closeButton = EventMetricType<CloseButtonExtra>( // generated from app_menu.close_button
            CommonMetricData(
                category: "app_menu",
                name: "close_button",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["is_homepage"]
        )

        /// Counts the number of times a user taps Customize Homepage
        /// in the app menu
        static let customizeHomepage = CounterMetricType( // generated from app_menu.customize_homepage
            CommonMetricData(
                category: "app_menu",
                name: "customize_homepage",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Counts the number of times a user taps Help in the app menu
        static let help = CounterMetricType( // generated from app_menu.help
            CommonMetricData(
                category: "app_menu",
                name: "help",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Counts the number of times a user taps Home in the app menu
        static let home = CounterMetricType( // generated from app_menu.home
            CommonMetricData(
                category: "app_menu",
                name: "home",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Counts the number of times a user taps in the menu toolbar
        /// on the homepage
        static let homepageMenu = CounterMetricType( // generated from app_menu.homepage_menu
            CommonMetricData(
                category: "app_menu",
                name: "homepage_menu",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Counts the number of times a user taps Logins & Passwords
        /// in the app menu
        static let logins = CounterMetricType( // generated from app_menu.logins
            CommonMetricData(
                category: "app_menu",
                name: "logins",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Record event when user has tapped on the main menu option.
        static let mainMenuOptionSelected = EventMetricType<MainMenuOptionSelectedExtra>( // generated from app_menu.main_menu_option_selected
            CommonMetricData(
                category: "app_menu",
                name: "main_menu_option_selected",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["is_homepage", "option"]
        )

        /// Record event when user has dismissed the menu because of tapping outside or
        /// drag the menu.
        static let menuDismissed = EventMetricType<MenuDismissedExtra>( // generated from app_menu.menu_dismissed
            CommonMetricData(
                category: "app_menu",
                name: "menu_dismissed",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["is_homepage"]
        )

        /// Counts the number of times a user taps Disable Night Mode
        /// in the app menu
        static let nightModeDisabled = CounterMetricType( // generated from app_menu.night_mode_disabled
            CommonMetricData(
                category: "app_menu",
                name: "night_mode_disabled",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Counts the number of times a user taps Enable Night Mode
        /// in the app menu
        static let nightModeEnabled = CounterMetricType( // generated from app_menu.night_mode_enabled
            CommonMetricData(
                category: "app_menu",
                name: "night_mode_enabled",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Records when the user taps Passwords in the app menu
        static let passwords = EventMetricType<NoExtras>( // generated from app_menu.passwords
            CommonMetricData(
                category: "app_menu",
                name: "passwords",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// Counts the number of times a user taps Settings in the app menu
        static let settings = CounterMetricType( // generated from app_menu.settings
            CommonMetricData(
                category: "app_menu",
                name: "settings",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Counts the number of times a user taps Sign Into Sync
        /// in the app menu
        static let signIntoSync = CounterMetricType( // generated from app_menu.sign_into_sync
            CommonMetricData(
                category: "app_menu",
                name: "sign_into_sync",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Counts the number of times a user taps in the menu toolbar
        /// from a website
        static let siteMenu = CounterMetricType( // generated from app_menu.site_menu
            CommonMetricData(
                category: "app_menu",
                name: "site_menu",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Counts the number of times a user taps What's New in the app menu
        static let whatsNew = CounterMetricType( // generated from app_menu.whats_new
            CommonMetricData(
                category: "app_menu",
                name: "whats_new",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

    }

    enum PageActionMenu {
        /// Counts the number of times a user taps Copy Address
        /// in the page action menu
        static let copyAddress = CounterMetricType( // generated from page_action_menu.copy_address
            CommonMetricData(
                category: "page_action_menu",
                name: "copy_address",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Counts the number of times a user creates a new tab from the
        /// page action menu.
        static let createNewTab = CounterMetricType( // generated from page_action_menu.create_new_tab
            CommonMetricData(
                category: "page_action_menu",
                name: "create_new_tab",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Counts the number of times a user taps Find in Page
        /// in the page action menu
        static let findInPage = CounterMetricType( // generated from page_action_menu.find_in_page
            CommonMetricData(
                category: "page_action_menu",
                name: "find_in_page",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Counts the number of times a user taps Pin to Top Sites
        /// in the page action menu
        static let pinToTopSites = CounterMetricType( // generated from page_action_menu.pin_to_top_sites
            CommonMetricData(
                category: "page_action_menu",
                name: "pin_to_top_sites",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Counts the number of times a user taps Pin to Top Sites
        /// in the page action menu
        static let removePinnedSite = CounterMetricType( // generated from page_action_menu.remove_pinned_site
            CommonMetricData(
                category: "page_action_menu",
                name: "remove_pinned_site",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Counts the number of times a user taps Report Site Issue
        /// in the page action menu
        static let reportSiteIssue = CounterMetricType( // generated from page_action_menu.report_site_issue
            CommonMetricData(
                category: "page_action_menu",
                name: "report_site_issue",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Counts the number of times a user taps Request Desktop Site
        /// in the page action menu
        static let requestDesktopSite = CounterMetricType( // generated from page_action_menu.request_desktop_site
            CommonMetricData(
                category: "page_action_menu",
                name: "request_desktop_site",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Counts the number of times a user taps Request Mobile Site
        /// in the page action menu
        static let requestMobileSite = CounterMetricType( // generated from page_action_menu.request_mobile_site
            CommonMetricData(
                category: "page_action_menu",
                name: "request_mobile_site",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Counts the number of times a user taps Send to Device
        /// in the page action menu
        static let sendToDevice = CounterMetricType( // generated from page_action_menu.send_to_device
            CommonMetricData(
                category: "page_action_menu",
                name: "send_to_device",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Counts the number of times a user taps Share Page With in the
        /// page action menu
        static let sharePageWith = CounterMetricType( // generated from page_action_menu.share_page_with
            CommonMetricData(
                category: "page_action_menu",
                name: "share_page_with",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Counts the number of times a user navigates to the downloads panel
        /// from the page action menu.
        static let viewDownloadsPanel = CounterMetricType( // generated from page_action_menu.view_downloads_panel
            CommonMetricData(
                category: "page_action_menu",
                name: "view_downloads_panel",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Counts the number of times a user navigates to the history panel
        /// from the page action menu.
        static let viewHistoryPanel = CounterMetricType( // generated from page_action_menu.view_history_panel
            CommonMetricData(
                category: "page_action_menu",
                name: "view_history_panel",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

    }

    enum Addresses {
        /// Recorded when the autofill prompt was dismissed.
        static let autofillPromptDismissed = EventMetricType<NoExtras>( // generated from addresses.autofill_prompt_dismissed
            CommonMetricData(
                category: "addresses",
                name: "autofill_prompt_dismissed",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// Recorded when the autofill prompt was expanded.
        static let autofillPromptExpanded = EventMetricType<NoExtras>( // generated from addresses.autofill_prompt_expanded
            CommonMetricData(
                category: "addresses",
                name: "autofill_prompt_expanded",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// Recorded when autofill popup is shown, indicating which field triggered this
        /// event.
        static let autofillPromptShown = EventMetricType<NoExtras>( // generated from addresses.autofill_prompt_shown
            CommonMetricData(
                category: "addresses",
                name: "autofill_prompt_shown",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// Recorded when a form is autofilled.
        static let autofilled = EventMetricType<NoExtras>( // generated from addresses.autofilled
            CommonMetricData(
                category: "addresses",
                name: "autofilled",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// Recorded when a form is recognized as an address form.
        static let formDetected = EventMetricType<NoExtras>( // generated from addresses.form_detected
            CommonMetricData(
                category: "addresses",
                name: "form_detected",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// Recorded when a field is autofilled and then modified by the user.
        static let modified = EventMetricType<NoExtras>( // generated from addresses.modified
            CommonMetricData(
                category: "addresses",
                name: "modified",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// A counter of the number of all addresses that are currently saved by the user.
        static let savedAll = QuantityMetricType( // generated from addresses.saved_all
            CommonMetricData(
                category: "addresses",
                name: "saved_all",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Recorded when the user has tapped Autofill in the settings menu.
        static let settingsAutofill = EventMetricType<NoExtras>( // generated from addresses.settings_autofill
            CommonMetricData(
                category: "addresses",
                name: "settings_autofill",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

    }

    enum CreditCard {
        struct AutofillToggleExtra: EventExtras {
            var isEnabled: Bool?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let isEnabled = self.isEnabled {
                    record["is_enabled"] = String(isEnabled)
                }

                return record
            }
        }

        struct SyncToggleExtra: EventExtras {
            var isEnabled: Bool?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let isEnabled = self.isEnabled {
                    record["is_enabled"] = String(isEnabled)
                }

                return record
            }
        }

        /// Recorded on startup to check if credit card
        /// autofill settings are enabled
        static let autofillEnabled = BooleanMetricType( // generated from credit_card.autofill_enabled
            CommonMetricData(
                category: "credit_card",
                name: "autofill_enabled",
                sendInPings: ["metrics"],
                lifetime: .application,
                disabled: false
            )
        )

        /// Recorded when a user taps a card from bottom sheet
        /// select a card flow and the credit card does not
        /// get autofilled on the webpage
        static let autofillFailed = EventMetricType<NoExtras>( // generated from credit_card.autofill_failed
            CommonMetricData(
                category: "credit_card",
                name: "autofill_failed",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// Records when the credit card autofill prompt was dismissed.
        static let autofillPromptDismissed = EventMetricType<NoExtras>( // generated from credit_card.autofill_prompt_dismissed
            CommonMetricData(
                category: "credit_card",
                name: "autofill_prompt_dismissed",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// Records when the credit card autofill prompt was expanded.
        static let autofillPromptExpanded = EventMetricType<NoExtras>( // generated from credit_card.autofill_prompt_expanded
            CommonMetricData(
                category: "credit_card",
                name: "autofill_prompt_expanded",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// Records when the credit card autofill prompt was shown.
        static let autofillPromptShown = EventMetricType<NoExtras>( // generated from credit_card.autofill_prompt_shown
            CommonMetricData(
                category: "credit_card",
                name: "autofill_prompt_shown",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// Recorded when the user taps on credit card autofill
        /// settings item in settings screen.
        static let autofillSettingsTapped = EventMetricType<NoExtras>( // generated from credit_card.autofill_settings_tapped
            CommonMetricData(
                category: "credit_card",
                name: "autofill_settings_tapped",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// Recorded when a user toggles to enable save and autofill
        /// cards in autofill settings
        static let autofillToggle = EventMetricType<AutofillToggleExtra>( // generated from credit_card.autofill_toggle
            CommonMetricData(
                category: "credit_card",
                name: "autofill_toggle",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["is_enabled"]
        )

        /// Recorded when a user taps a card from bottom sheet
        /// select a card flow and the credit card gets
        /// autofilled on the webpage
        static let autofilled = EventMetricType<NoExtras>( // generated from credit_card.autofilled
            CommonMetricData(
                category: "credit_card",
                name: "autofilled",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// A counter of the number of credit cards that have been deleted by the user.
        static let deleted = CounterMetricType( // generated from credit_card.deleted
            CommonMetricData(
                category: "credit_card",
                name: "deleted",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Recorded when the user taps on credit card form input
        /// and we detect it.
        static let formDetected = EventMetricType<NoExtras>( // generated from credit_card.form_detected
            CommonMetricData(
                category: "credit_card",
                name: "form_detected",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// Records when the user has tapped the add button through credit card management
        /// settings.
        static let managementAddTapped = EventMetricType<NoExtras>( // generated from credit_card.management_add_tapped
            CommonMetricData(
                category: "credit_card",
                name: "management_add_tapped",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// Records when the user has tapped on a saved card through credit card management
        /// settings.
        static let managementCardTapped = EventMetricType<NoExtras>( // generated from credit_card.management_card_tapped
            CommonMetricData(
                category: "credit_card",
                name: "management_card_tapped",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// A counter of the number of credit cards that have been modified by the user.
        static let modified = CounterMetricType( // generated from credit_card.modified
            CommonMetricData(
                category: "credit_card",
                name: "modified",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Recorded when a user saved a credit card using
        /// the autofill save prompt.
        static let savePromptCreate = EventMetricType<NoExtras>( // generated from credit_card.save_prompt_create
            CommonMetricData(
                category: "credit_card",
                name: "save_prompt_create",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// Records when the credit card autofill save prompt is shown.
        static let savePromptShown = EventMetricType<NoExtras>( // generated from credit_card.save_prompt_shown
            CommonMetricData(
                category: "credit_card",
                name: "save_prompt_shown",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// Records when the user updated a credit card using the autofill save prompt.
        static let savePromptUpdate = EventMetricType<NoExtras>( // generated from credit_card.save_prompt_update
            CommonMetricData(
                category: "credit_card",
                name: "save_prompt_update",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// A counter of the number of credit cards that have been saved by the user.
        static let saved = CounterMetricType( // generated from credit_card.saved
            CommonMetricData(
                category: "credit_card",
                name: "saved",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Record the number of ALL the credit cards that have been currently stored by
        /// the user.
        static let savedAll = QuantityMetricType( // generated from credit_card.saved_all
            CommonMetricData(
                category: "credit_card",
                name: "saved_all",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Recorded on startup to check if credit card
        /// sync settings are enabled
        static let syncEnabled = BooleanMetricType( // generated from credit_card.sync_enabled
            CommonMetricData(
                category: "credit_card",
                name: "sync_enabled",
                sendInPings: ["metrics"],
                lifetime: .application,
                disabled: false
            )
        )

        /// Recorded when a user toggles to enable save and autofill
        /// cards in sync settings
        static let syncToggle = EventMetricType<SyncToggleExtra>( // generated from credit_card.sync_toggle
            CommonMetricData(
                category: "credit_card",
                name: "sync_toggle",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["is_enabled"]
        )

    }

    enum PasswordGenerator {
        /// The "use password button" of the password generator bottom sheet was clicked.
        static let filled = CounterMetricType( // generated from password_generator.filled
            CommonMetricData(
                category: "password_generator",
                name: "filled",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// The password generator bottom sheet was shown and is visible
        static let shown = CounterMetricType( // generated from password_generator.shown
            CommonMetricData(
                category: "password_generator",
                name: "shown",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

    }

    enum Logins {
        struct SyncEnabledExtra: EventExtras {
            var isEnabled: Bool?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let isEnabled = self.isEnabled {
                    record["is_enabled"] = String(isEnabled)
                }

                return record
            }
        }

        /// Records when the user has failed to autofill a password.
        static let autofillFailed = EventMetricType<NoExtras>( // generated from logins.autofill_failed
            CommonMetricData(
                category: "logins",
                name: "autofill_failed",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// Password autofill prompt was dismissed.
        static let autofillPromptDismissed = EventMetricType<NoExtras>( // generated from logins.autofill_prompt_dismissed
            CommonMetricData(
                category: "logins",
                name: "autofill_prompt_dismissed",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// Password autofill prompt was expanded.
        static let autofillPromptExpanded = EventMetricType<NoExtras>( // generated from logins.autofill_prompt_expanded
            CommonMetricData(
                category: "logins",
                name: "autofill_prompt_expanded",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// Password autofill prompt was shown.
        static let autofillPromptShown = EventMetricType<NoExtras>( // generated from logins.autofill_prompt_shown
            CommonMetricData(
                category: "logins",
                name: "autofill_prompt_shown",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// Records when the user has autofilled a login.
        static let autofilled = EventMetricType<NoExtras>( // generated from logins.autofilled
            CommonMetricData(
                category: "logins",
                name: "autofilled",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// A counter of the number of passwords that have been deleted by the user.
        static let deleted = CounterMetricType( // generated from logins.deleted
            CommonMetricData(
                category: "logins",
                name: "deleted",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Records when the user has tapped the add button through password management in
        /// the settings menu
        static let managementAddTapped = EventMetricType<NoExtras>( // generated from logins.management_add_tapped
            CommonMetricData(
                category: "logins",
                name: "management_add_tapped",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// Records when the user has tapped on a saved login through password management
        /// in the setting menu.
        static let managementLoginsTapped = EventMetricType<NoExtras>( // generated from logins.management_logins_tapped
            CommonMetricData(
                category: "logins",
                name: "management_logins_tapped",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// A counter of the number of passwords that have been modified by the user.
        static let modified = CounterMetricType( // generated from logins.modified
            CommonMetricData(
                category: "logins",
                name: "modified",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// A counter of the number of passwords that have been saved by the user.
        static let saved = CounterMetricType( // generated from logins.saved
            CommonMetricData(
                category: "logins",
                name: "saved",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Record the number of ALL the passwords that have been currently stored by the
        /// user.
        static let savedAll = QuantityMetricType( // generated from logins.saved_all
            CommonMetricData(
                category: "logins",
                name: "saved_all",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Whether the user has logins enabled in sync option
        static let syncEnabled = EventMetricType<SyncEnabledExtra>( // generated from logins.sync_enabled
            CommonMetricData(
                category: "logins",
                name: "sync_enabled",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["is_enabled"]
        )

    }

    enum HistoryMigration2022 {
        /// Recorded when a user undergoes a successful application services history
        /// migration. This migration occurs for users updating their app from
        /// version 110. The migration ensures the user preserves all their browsing
        /// history. This migration was added in the fall of 2022.
        /// 
        /// This setting can safely be expired after we have ensured that the history
        /// migration code is no longer required (due to low event counts).
        /// 
        /// Owner: @Andy
        static let migrationAttempted = EventMetricType<NoExtras>( // generated from history.migration_2022.migration_attempted
            CommonMetricData(
                category: "history.migration_2022",
                name: "migration_attempted",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

    }

    enum Bookmarks {
        /// A user added a new bookmark folder.
        static let folderAdd = EventMetricType<NoExtras>( // generated from bookmarks.folder_add
            CommonMetricData(
                category: "bookmarks",
                name: "folder_add",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        private static let viewListLabel = CounterMetricType( // generated from bookmarks.view_list
            CommonMetricData(
                category: "bookmarks",
                name: "view_list",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Counts the number of times the bookmarks list is opened
        /// from either the Home Panel tab button or the App Menu.
        static let viewList = try! LabeledMetricType<CounterMetricType>( // generated from bookmarks.view_list
            category: "bookmarks",
            name: "view_list",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false,
            subMetric: viewListLabel,
            labels: ["app-menu"]
        )

        private static let addLabel = CounterMetricType( // generated from bookmarks.add
            CommonMetricData(
                category: "bookmarks",
                name: "add",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Counts the number of times a bookmark is added from the
        /// following:
        /// * Page Action Menu
        /// * Share Menu
        /// * Activity stream
        static let add = try! LabeledMetricType<CounterMetricType>( // generated from bookmarks.add
            category: "bookmarks",
            name: "add",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false,
            subMetric: addLabel,
            labels: ["activity-stream", "page-action-menu", "share-menu"]
        )

        private static let deleteLabel = CounterMetricType( // generated from bookmarks.delete
            CommonMetricData(
                category: "bookmarks",
                name: "delete",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Counts the number of times a bookmark is deleted from
        /// the following:
        /// * Page Action Menu
        /// * Activity Stream
        /// * Bookmarks Panel
        static let delete = try! LabeledMetricType<CounterMetricType>( // generated from bookmarks.delete
            category: "bookmarks",
            name: "delete",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false,
            subMetric: deleteLabel,
            labels: ["activity-stream", "bookmarks-panel", "page-action-menu"]
        )

        private static let editLabel = CounterMetricType( // generated from bookmarks.edit
            CommonMetricData(
                category: "bookmarks",
                name: "edit",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Counts the number of times a bookmark is tapped to
        /// be edited from:
        /// * Add bookmark toast Edit button
        /// * Bookmarks panel edit bookmarks view
        static let edit = try! LabeledMetricType<CounterMetricType>( // generated from bookmarks.edit
            category: "bookmarks",
            name: "edit",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false,
            subMetric: editLabel,
            labels: ["add-bookmark-toast", "bookmarks-panel"]
        )

        /// A boolean that indicates if the user has bookmarks
        /// in the mobile folder.
        static let hasMobileBookmarks = BooleanMetricType( // generated from bookmarks.has_mobile_bookmarks
            CommonMetricData(
                category: "bookmarks",
                name: "has_mobile_bookmarks",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// A quantity that indicates how many bookmarks a user
        /// has in the mobile folder.
        static let mobileBookmarksCount = QuantityMetricType( // generated from bookmarks.mobile_bookmarks_count
            CommonMetricData(
                category: "bookmarks",
                name: "mobile_bookmarks_count",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        private static let openLabel = CounterMetricType( // generated from bookmarks.open
            CommonMetricData(
                category: "bookmarks",
                name: "open",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Counts the number of times a bookmark is opened from
        /// the following:
        /// * Awesomebar results
        /// * Bookmarks Panel
        /// * Top sites
        static let open = try! LabeledMetricType<CounterMetricType>( // generated from bookmarks.open
            category: "bookmarks",
            name: "open",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false,
            subMetric: openLabel,
            labels: ["awesomebar-results", "bookmarks-panel"]
        )

    }

    enum Downloads {
        /// Records when a row is pressed in the downloads panel
        static let downloadsPanelRowTapped = EventMetricType<NoExtras>( // generated from downloads.downloads_panel_row_tapped
            CommonMetricData(
                category: "downloads",
                name: "downloads_panel_row_tapped",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// Records when the download now button is pressed
        static let downloadNowButtonTapped = EventMetricType<NoExtras>( // generated from downloads.download_now_button_tapped
            CommonMetricData(
                category: "downloads",
                name: "download_now_button_tapped",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// Records when the toast message is tapped after a download is completed
        static let viewDownloadCompleteToast = EventMetricType<NoExtras>( // generated from downloads.view_download_complete_toast
            CommonMetricData(
                category: "downloads",
                name: "view_download_complete_toast",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

    }

    enum History {
        /// Recorded when a user taps on trash icon in history panel
        static let deleteTap = EventMetricType<NoExtras>( // generated from history.delete_tap
            CommonMetricData(
                category: "history",
                name: "delete_tap",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// A user opened the history screen.
        static let opened = EventMetricType<NoExtras>( // generated from history.opened
            CommonMetricData(
                category: "history",
                name: "opened",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// Recorded when a user opened a history item
        static let openedItem = EventMetricType<NoExtras>( // generated from history.opened_item
            CommonMetricData(
                category: "history",
                name: "opened_item",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// A user removed a history item.
        static let removed = EventMetricType<NoExtras>( // generated from history.removed
            CommonMetricData(
                category: "history",
                name: "removed",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// Recorded when a user taps on search icon in history panel
        static let searchTap = EventMetricType<NoExtras>( // generated from history.search_tap
            CommonMetricData(
                category: "history",
                name: "search_tap",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        private static let selectedItemLabel = CounterMetricType( // generated from history.selected_item
            CommonMetricData(
                category: "history",
                name: "selected_item",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Counts the number of times a user selected an item from
        /// the history panel. This labeled counter will tell apart
        /// items that appear inside a group, and those that do not.
        static let selectedItem = try! LabeledMetricType<CounterMetricType>( // generated from history.selected_item
            category: "history",
            name: "selected_item",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false,
            subMetric: selectedItemLabel,
            labels: ["group-item", "non-grouped-item"]
        )

    }

    enum LibraryHistoryPanel {
        struct ClearedHistoryExtra: EventExtras {
            var timeframe: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let timeframe = self.timeframe {
                    record["timeframe"] = String(timeframe)
                }

                return record
            }
        }

        /// A user deleted history entries from a certain timeframe
        static let clearedHistory = EventMetricType<ClearedHistoryExtra>( // generated from library.history_panel.cleared_history
            CommonMetricData(
                category: "library.history_panel",
                name: "cleared_history",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["timeframe"]
        )

    }

    enum ReadingList {
        /// Counts the number of times an item is opened from the
        /// Reading List
        static let open = CounterMetricType( // generated from reading_list.open
            CommonMetricData(
                category: "reading_list",
                name: "open",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        private static let addLabel = CounterMetricType( // generated from reading_list.add
            CommonMetricData(
                category: "reading_list",
                name: "add",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Counts the number of times an item is added to the reading
        /// list from the following:
        /// * Reader Mode Toolbar
        /// * Share Extension
        /// * Page Action Menu
        static let add = try! LabeledMetricType<CounterMetricType>( // generated from reading_list.add
            category: "reading_list",
            name: "add",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false,
            subMetric: addLabel,
            labels: ["page-action-menu", "reader-mode-toolbar", "share-extension"]
        )

        private static let deleteLabel = CounterMetricType( // generated from reading_list.delete
            CommonMetricData(
                category: "reading_list",
                name: "delete",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Counts the number of times an item is added to the
        /// reading list from the following:
        /// * Reader Mode Toolbar
        /// * Reading List Panel
        static let delete = try! LabeledMetricType<CounterMetricType>( // generated from reading_list.delete
            category: "reading_list",
            name: "delete",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false,
            subMetric: deleteLabel,
            labels: ["page-action-menu", "reader-mode-toolbar", "reading-list-panel"]
        )

    }

    enum Accessibility {
        struct DynamicTextExtra: EventExtras {
            var isAccessibilitySizeEnabled: String?
            var preferredSize: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let isAccessibilitySizeEnabled = self.isAccessibilitySizeEnabled {
                    record["is_accessibility_size_enabled"] = String(isAccessibilitySizeEnabled)
                }
                if let preferredSize = self.preferredSize {
                    record["preferred_size"] = String(preferredSize)
                }

                return record
            }
        }

        struct InvertColorsExtra: EventExtras {
            var isEnabled: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let isEnabled = self.isEnabled {
                    record["is_enabled"] = String(isEnabled)
                }

                return record
            }
        }

        struct ReduceMotionExtra: EventExtras {
            var isEnabled: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let isEnabled = self.isEnabled {
                    record["is_enabled"] = String(isEnabled)
                }

                return record
            }
        }

        struct ReduceTransparencyExtra: EventExtras {
            var isEnabled: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let isEnabled = self.isEnabled {
                    record["is_enabled"] = String(isEnabled)
                }

                return record
            }
        }

        struct SwitchControlExtra: EventExtras {
            var isRunning: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let isRunning = self.isRunning {
                    record["is_running"] = String(isRunning)
                }

                return record
            }
        }

        struct VoiceOverExtra: EventExtras {
            var isRunning: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let isRunning = self.isRunning {
                    record["is_running"] = String(isRunning)
                }

                return record
            }
        }

        /// Records the Dynamic Text feature
        static let dynamicText = EventMetricType<DynamicTextExtra>( // generated from accessibility.dynamic_text
            CommonMetricData(
                category: "accessibility",
                name: "dynamic_text",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["is_accessibility_size_enabled", "preferred_size"]
        )

        /// Records the Invert Colors feature
        static let invertColors = EventMetricType<InvertColorsExtra>( // generated from accessibility.invert_colors
            CommonMetricData(
                category: "accessibility",
                name: "invert_colors",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["is_enabled"]
        )

        /// Records the Reduce Motion feature
        static let reduceMotion = EventMetricType<ReduceMotionExtra>( // generated from accessibility.reduce_motion
            CommonMetricData(
                category: "accessibility",
                name: "reduce_motion",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["is_enabled"]
        )

        /// Records the Reduce Transparency feature
        static let reduceTransparency = EventMetricType<ReduceTransparencyExtra>( // generated from accessibility.reduce_transparency
            CommonMetricData(
                category: "accessibility",
                name: "reduce_transparency",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["is_enabled"]
        )

        /// Records the Switch Control feature
        static let switchControl = EventMetricType<SwitchControlExtra>( // generated from accessibility.switch_control
            CommonMetricData(
                category: "accessibility",
                name: "switch_control",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["is_running"]
        )

        /// Records the Voice Over feature
        static let voiceOver = EventMetricType<VoiceOverExtra>( // generated from accessibility.voice_over
            CommonMetricData(
                category: "accessibility",
                name: "voice_over",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["is_running"]
        )

    }

    enum Adjust {
        struct DeeplinkReceivedExtra: EventExtras {
            var receivedUrl: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let receivedUrl = self.receivedUrl {
                    record["received_url"] = String(receivedUrl)
                }

                return record
            }
        }

        /// A string containing the Adjust ad group ID from which the user installed
        /// Firefox-iOS.
        static let adGroup = StringMetricType( // generated from adjust.ad_group
            CommonMetricData(
                category: "adjust",
                name: "ad_group",
                sendInPings: ["first-session", "metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// A string containing the Adjust campaign ID from which the user installed
        /// Firefox-iOS.
        static let campaign = StringMetricType( // generated from adjust.campaign
            CommonMetricData(
                category: "adjust",
                name: "campaign",
                sendInPings: ["first-session", "metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// A string containing the Adjust creative ID from which the user installed
        /// Firefox-iOS.
        static let creative = StringMetricType( // generated from adjust.creative
            CommonMetricData(
                category: "adjust",
                name: "creative",
                sendInPings: ["first-session", "metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Send for Adjust callback for deeplink.
        static let deeplinkReceived = EventMetricType<DeeplinkReceivedExtra>( // generated from adjust.deeplink_received
            CommonMetricData(
                category: "adjust",
                name: "deeplink_received",
                sendInPings: ["events", "first-session", "metrics"],
                lifetime: .ping,
                disabled: false
            )
            , ["received_url"]
        )

        /// A string containing the Adjust network ID from which the user installed
        /// Firefox-iOS.
        static let network = StringMetricType( // generated from adjust.network
            CommonMetricData(
                category: "adjust",
                name: "network",
                sendInPings: ["first-session", "metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

    }

    enum App {
        struct NotificationPermissionExtra: EventExtras {
            var alertSetting: String?
            var status: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let alertSetting = self.alertSetting {
                    record["alert_setting"] = String(alertSetting)
                }
                if let status = self.status {
                    record["status"] = String(status)
                }

                return record
            }
        }

        /// The user installed the app via the browser choice screen
        static let choiceScreenAcquisition = BooleanMetricType( // generated from app.choice_screen_acquisition
            CommonMetricData(
                category: "app",
                name: "choice_screen_acquisition",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Is Firefox the default browser
        static let defaultBrowser = BooleanMetricType( // generated from app.default_browser
            CommonMetricData(
                category: "app",
                name: "default_browser",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// The date of when the app was last opened as default browser.
        static let lastOpenedAsDefaultBrowser = DatetimeMetricType( // generated from app.last_opened_as_default_browser
            CommonMetricData(
                category: "app",
                name: "last_opened_as_default_browser",
                sendInPings: ["baseline", "metrics"],
                lifetime: .ping,
                disabled: false
            )
            , .day
        )

        /// Records the status of the users notification permission.
        static let notificationPermission = EventMetricType<NotificationPermissionExtra>( // generated from app.notification_permission
            CommonMetricData(
                category: "app",
                name: "notification_permission",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["alert_setting", "status"]
        )

        /// Counts the number of times the app is opened from an external
        /// link, implying the client has Firefox set as a default browser.
        /// 
        /// Currently this is our most accurate way of measuring how
        /// often Firefox is set as the default browser.
        static let openedAsDefaultBrowser = CounterMetricType( // generated from app.opened_as_default_browser
            CommonMetricData(
                category: "app",
                name: "opened_as_default_browser",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

    }

    enum AppCycle {
        /// Records when the app goes to background
        static let background = EventMetricType<NoExtras>( // generated from app_cycle.background
            CommonMetricData(
                category: "app_cycle",
                name: "background",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// Records when the app comes to foreground
        static let foreground = EventMetricType<NoExtras>( // generated from app_cycle.foreground
            CommonMetricData(
                category: "app_cycle",
                name: "foreground",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

    }

    enum AppErrors {
        struct CpuExceptionExtra: EventExtras {
            var size: Int32?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let size = self.size {
                    record["size"] = String(size)
                }

                return record
            }
        }

        struct HangExceptionExtra: EventExtras {
            var size: Int32?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let size = self.size {
                    record["size"] = String(size)
                }

                return record
            }
        }

        struct LargeFileWriteExtra: EventExtras {
            var size: Int32?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let size = self.size {
                    record["size"] = String(size)
                }

                return record
            }
        }

        /// Recorded when a cpu exception is triggered
        static let cpuException = EventMetricType<CpuExceptionExtra>( // generated from app_errors.cpu_exception
            CommonMetricData(
                category: "app_errors",
                name: "cpu_exception",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["size"]
        )

        /// Recorded when the previous session ended as a result of a crash
        static let crashedLastLaunch = EventMetricType<NoExtras>( // generated from app_errors.crashed_last_launch
            CommonMetricData(
                category: "app_errors",
                name: "crashed_last_launch",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// Recorded when the main thread hangs
        static let hangException = EventMetricType<HangExceptionExtra>( // generated from app_errors.hang_exception
            CommonMetricData(
                category: "app_errors",
                name: "hang_exception",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["size"]
        )

        /// Recorded when a very large file is written to disk
        static let largeFileWrite = EventMetricType<LargeFileWriteExtra>( // generated from app_errors.large_file_write
            CommonMetricData(
                category: "app_errors",
                name: "large_file_write",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["size"]
        )

        /// Recorded when we detect potential tab loss
        static let tabLossDetected = EventMetricType<NoExtras>( // generated from app_errors.tab_loss_detected
            CommonMetricData(
                category: "app_errors",
                name: "tab_loss_detected",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

    }

    enum BrowserSearch {
        private static let adClicksLabel = CounterMetricType( // generated from browser_search.ad_clicks
            CommonMetricData(
                category: "browser_search",
                name: "ad_clicks",
                sendInPings: ["baseline", "metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Records clicks of adverts on SERP pages.
        /// The key format is `<provider-name>`.
        static let adClicks = try! LabeledMetricType<CounterMetricType>( // generated from browser_search.ad_clicks
            category: "browser_search",
            name: "ad_clicks",
            sendInPings: ["baseline", "metrics"],
            lifetime: .ping,
            disabled: false,
            subMetric: adClicksLabel,
            labels: nil
        )

        private static let withAdsLabel = CounterMetricType( // generated from browser_search.with_ads
            CommonMetricData(
                category: "browser_search",
                name: "with_ads",
                sendInPings: ["baseline", "metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Records counts of SERP pages with adverts displayed.
        /// The key format is `<provider-name>`.
        static let withAds = try! LabeledMetricType<CounterMetricType>( // generated from browser_search.with_ads
            category: "browser_search",
            name: "with_ads",
            sendInPings: ["baseline", "metrics"],
            lifetime: .ping,
            disabled: false,
            subMetric: withAdsLabel,
            labels: nil
        )

    }

    enum CfrAnalytics {
        struct DismissCfrFromButtonExtra: EventExtras {
            var hintType: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let hintType = self.hintType {
                    record["hint_type"] = String(hintType)
                }

                return record
            }
        }

        struct DismissCfrFromOutsideTapExtra: EventExtras {
            var hintType: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let hintType = self.hintType {
                    record["hint_type"] = String(hintType)
                }

                return record
            }
        }

        struct PressCfrActionButtonExtra: EventExtras {
            var hintType: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let hintType = self.hintType {
                    record["hint_type"] = String(hintType)
                }

                return record
            }
        }

        /// Recorded when the user dismisses a CFR by tapping
        /// the close button in the CFR. Hint type is sent
        /// in the extra keys.
        static let dismissCfrFromButton = EventMetricType<DismissCfrFromButtonExtra>( // generated from cfr_analytics.dismiss_cfr_from_button
            CommonMetricData(
                category: "cfr_analytics",
                name: "dismiss_cfr_from_button",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["hint_type"]
        )

        /// Recorded when the user dismisses a CFR by tapping
        /// outside the CFR. Hint type is sent in the extra keys.
        static let dismissCfrFromOutsideTap = EventMetricType<DismissCfrFromOutsideTapExtra>( // generated from cfr_analytics.dismiss_cfr_from_outside_tap
            CommonMetricData(
                category: "cfr_analytics",
                name: "dismiss_cfr_from_outside_tap",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["hint_type"]
        )

        /// Recorded when the user taps CFR's action button.
        /// Hint type is sent in the extra keys.
        static let pressCfrActionButton = EventMetricType<PressCfrActionButtonExtra>( // generated from cfr_analytics.press_cfr_action_button
            CommonMetricData(
                category: "cfr_analytics",
                name: "press_cfr_action_button",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["hint_type"]
        )

    }

    enum ContextMenu {
        struct DismissedExtra: EventExtras {
            var origin: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let origin = self.origin {
                    record["origin"] = String(origin)
                }

                return record
            }
        }

        struct OptionSelectedExtra: EventExtras {
            var option: String?
            var origin: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let option = self.option {
                    record["option"] = String(option)
                }
                if let origin = self.origin {
                    record["origin"] = String(origin)
                }

                return record
            }
        }

        struct ShownExtra: EventExtras {
            var origin: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let origin = self.origin {
                    record["origin"] = String(origin)
                }

                return record
            }
        }

        /// Records when a context menu is dismissed.
        static let dismissed = EventMetricType<DismissedExtra>( // generated from context_menu.dismissed
            CommonMetricData(
                category: "context_menu",
                name: "dismissed",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["origin"]
        )

        /// Records when the user selects an option from a context menu.
        static let optionSelected = EventMetricType<OptionSelectedExtra>( // generated from context_menu.option_selected
            CommonMetricData(
                category: "context_menu",
                name: "option_selected",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["option", "origin"]
        )

        /// Records when a context menu is shown.
        static let shown = EventMetricType<ShownExtra>( // generated from context_menu.shown
            CommonMetricData(
                category: "context_menu",
                name: "shown",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["origin"]
        )

    }

    enum DefaultBrowserCard {
        /// Counts the number of times default browser card is dismissed.
        static let dismissPressed = CounterMetricType( // generated from default_browser_card.dismiss_pressed
            CommonMetricData(
                category: "default_browser_card",
                name: "dismiss_pressed",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Reports events of Home Tab Banner evergreen impressions.
        static let evergreenImpression = EventMetricType<NoExtras>( // generated from default_browser_card.evergreen_impression
            CommonMetricData(
                category: "default_browser_card",
                name: "evergreen_impression",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// Counts the number of times the Go To Settings button on
        /// default browser card is clicked.
        static let goToSettingsPressed = CounterMetricType( // generated from default_browser_card.go_to_settings_pressed
            CommonMetricData(
                category: "default_browser_card",
                name: "go_to_settings_pressed",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

    }

    enum DefaultBrowserOnboarding {
        /// Counts the number of times default browser onboarding is dismissed.
        static let dismissPressed = CounterMetricType( // generated from default_browser_onboarding.dismiss_pressed
            CommonMetricData(
                category: "default_browser_onboarding",
                name: "dismiss_pressed",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Counts the number of times the Go To Settings button on
        /// default browser onboarding is clicked.
        static let goToSettingsPressed = CounterMetricType( // generated from default_browser_onboarding.go_to_settings_pressed
            CommonMetricData(
                category: "default_browser_onboarding",
                name: "go_to_settings_pressed",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

    }

    enum Deletion {
        /// The FxA device id.
        static let syncDeviceId = StringMetricType( // generated from deletion.sync_device_id
            CommonMetricData(
                category: "deletion",
                name: "sync_device_id",
                sendInPings: ["deletion-request"],
                lifetime: .user,
                disabled: false
            )
        )

    }

    enum Device {
        /// True if the device support device owner authentication
        /// with either biometrics or a passcode.
        static let authentication = BooleanMetricType( // generated from device.authentication
            CommonMetricData(
                category: "device",
                name: "authentication",
                sendInPings: ["metrics"],
                lifetime: .application,
                disabled: false
            )
        )

    }

    enum FirefoxHomePage {
        struct ReadingListViewExtra: EventExtras {
            var readingListCount: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let readingListCount = self.readingListCount {
                    record["reading_list_count"] = String(readingListCount)
                }

                return record
            }
        }

        struct RecentlySavedBookmarkViewExtra: EventExtras {
            var bookmarkCount: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let bookmarkCount = self.bookmarkCount {
                    record["bookmark_count"] = String(bookmarkCount)
                }

                return record
            }
        }

        /// Counts the number of times a user taps to open the
        /// settings menu to customize the Firefox Homepage
        static let customizeHomepageButton = CounterMetricType( // generated from firefox_home_page.customize_homepage_button
            CommonMetricData(
                category: "firefox_home_page",
                name: "customize_homepage_button",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        private static let firefoxHomepageOriginLabel = CounterMetricType( // generated from firefox_home_page.firefox_homepage_origin
            CommonMetricData(
                category: "firefox_home_page",
                name: "firefox_homepage_origin",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// The number of times a user sees the Firefox Homepage,
        /// with a home page origin.
        static let firefoxHomepageOrigin = try! LabeledMetricType<CounterMetricType>( // generated from firefox_home_page.firefox_homepage_origin
            category: "firefox_home_page",
            name: "firefox_homepage_origin",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false,
            subMetric: firefoxHomepageOriginLabel,
            labels: ["origin-other", "zero-search"]
        )

        /// The number of times a user sees the Firefox Homepage
        static let firefoxHomepageView = CounterMetricType( // generated from firefox_home_page.firefox_homepage_view
            CommonMetricData(
                category: "firefox_home_page",
                name: "firefox_homepage_view",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        private static let jumpBackInGroupOpenOriginLabel = CounterMetricType( // generated from firefox_home_page.jump_back_in_group_open_origin
            CommonMetricData(
                category: "firefox_home_page",
                name: "jump_back_in_group_open_origin",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Counts the number of times a user taps to open an
        /// existing group from the Jump Back In section,
        /// with a home page origin.
        static let jumpBackInGroupOpenOrigin = try! LabeledMetricType<CounterMetricType>( // generated from firefox_home_page.jump_back_in_group_open_origin
            category: "firefox_home_page",
            name: "jump_back_in_group_open_origin",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false,
            subMetric: jumpBackInGroupOpenOriginLabel,
            labels: ["origin-other", "zero-search"]
        )

        /// Counts the number of times a user taps to open an
        /// existing group from the Jump Back In section
        static let jumpBackInGroupOpened = CounterMetricType( // generated from firefox_home_page.jump_back_in_group_opened
            CommonMetricData(
                category: "firefox_home_page",
                name: "jump_back_in_group_opened",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Counts the number of times a user taps the
        /// Show All button in the Jump Back In section.
        static let jumpBackInShowAll = CounterMetricType( // generated from firefox_home_page.jump_back_in_show_all
            CommonMetricData(
                category: "firefox_home_page",
                name: "jump_back_in_show_all",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        private static let jumpBackInShowAllOriginLabel = CounterMetricType( // generated from firefox_home_page.jump_back_in_show_all_origin
            CommonMetricData(
                category: "firefox_home_page",
                name: "jump_back_in_show_all_origin",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Counts the number of times a user taps the
        /// Show All button in the Jump Back In section,
        /// with a home page origin.
        static let jumpBackInShowAllOrigin = try! LabeledMetricType<CounterMetricType>( // generated from firefox_home_page.jump_back_in_show_all_origin
            category: "firefox_home_page",
            name: "jump_back_in_show_all_origin",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false,
            subMetric: jumpBackInShowAllOriginLabel,
            labels: ["origin-other", "zero-search"]
        )

        /// Counts the number of times a user taps to open an
        /// existing tab from the Jump Back In section
        static let jumpBackInTabOpened = CounterMetricType( // generated from firefox_home_page.jump_back_in_tab_opened
            CommonMetricData(
                category: "firefox_home_page",
                name: "jump_back_in_tab_opened",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        private static let jumpBackInTabOpenedOriginLabel = CounterMetricType( // generated from firefox_home_page.jump_back_in_tab_opened_origin
            CommonMetricData(
                category: "firefox_home_page",
                name: "jump_back_in_tab_opened_origin",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Counts the number of times a user taps to open an
        /// existing tab from the Jump Back In section,
        /// with a home page origin.
        static let jumpBackInTabOpenedOrigin = try! LabeledMetricType<CounterMetricType>( // generated from firefox_home_page.jump_back_in_tab_opened_origin
            category: "firefox_home_page",
            name: "jump_back_in_tab_opened_origin",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false,
            subMetric: jumpBackInTabOpenedOriginLabel,
            labels: ["origin-other", "zero-search"]
        )

        /// Counts the number of times a user sees a Jump Back In tile
        /// in the Jump Back In section on the homepage
        static let jumpBackInTileView = CounterMetricType( // generated from firefox_home_page.jump_back_in_tile_view
            CommonMetricData(
                category: "firefox_home_page",
                name: "jump_back_in_tile_view",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Counts when a user opens Firefox Home
        /// from awesomebar.
        static let openFromAwesomebar = CounterMetricType( // generated from firefox_home_page.open_from_awesomebar
            CommonMetricData(
                category: "firefox_home_page",
                name: "open_from_awesomebar",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Counts when user opens Firefox Home from
        /// bottom right hamburger menu Home button
        /// and New Tab button.
        static let openFromMenuHomeButton = CounterMetricType( // generated from firefox_home_page.open_from_menu_home_button
            CommonMetricData(
                category: "firefox_home_page",
                name: "open_from_menu_home_button",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Measures the state of the show Pocket stories preference.
        static let pocketStoriesVisible = BooleanMetricType( // generated from firefox_home_page.pocket_stories_visible
            CommonMetricData(
                category: "firefox_home_page",
                name: "pocket_stories_visible",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Counts the number of reading list items
        /// appearing in the Recently Saved section
        /// on the Firefox home page.
        static let readingListView = EventMetricType<ReadingListViewExtra>( // generated from firefox_home_page.reading_list_view
            CommonMetricData(
                category: "firefox_home_page",
                name: "reading_list_view",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["reading_list_count"]
        )

        /// Counts the number of times a bookmarked item in
        /// the Recently Saved section is tapped
        static let recentlySavedBookmarkItem = CounterMetricType( // generated from firefox_home_page.recently_saved_bookmark_item
            CommonMetricData(
                category: "firefox_home_page",
                name: "recently_saved_bookmark_item",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        private static let recentlySavedBookmarkOriginLabel = CounterMetricType( // generated from firefox_home_page.recently_saved_bookmark_origin
            CommonMetricData(
                category: "firefox_home_page",
                name: "recently_saved_bookmark_origin",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Counts the number of times a bookmarked item in
        /// the Recently Saved section is tapped,
        /// with a home page origin.
        static let recentlySavedBookmarkOrigin = try! LabeledMetricType<CounterMetricType>( // generated from firefox_home_page.recently_saved_bookmark_origin
            category: "firefox_home_page",
            name: "recently_saved_bookmark_origin",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false,
            subMetric: recentlySavedBookmarkOriginLabel,
            labels: ["origin-other", "zero-search"]
        )

        /// Counts the number of bookmarked items appearing
        /// in the Recently Saved section on the home page.
        static let recentlySavedBookmarkView = EventMetricType<RecentlySavedBookmarkViewExtra>( // generated from firefox_home_page.recently_saved_bookmark_view
            CommonMetricData(
                category: "firefox_home_page",
                name: "recently_saved_bookmark_view",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["bookmark_count"]
        )

        private static let recentlySavedReadOriginLabel = CounterMetricType( // generated from firefox_home_page.recently_saved_read_origin
            CommonMetricData(
                category: "firefox_home_page",
                name: "recently_saved_read_origin",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Counts the number of times a reading list
        /// item in the Recently Saved section is tapped,
        /// with a home page origin.
        static let recentlySavedReadOrigin = try! LabeledMetricType<CounterMetricType>( // generated from firefox_home_page.recently_saved_read_origin
            category: "firefox_home_page",
            name: "recently_saved_read_origin",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false,
            subMetric: recentlySavedReadOriginLabel,
            labels: ["origin-other", "zero-search"]
        )

        /// Counts the number of times a reading list
        /// item in the Recently Saved section is tapped.
        static let recentlySavedReadingItem = CounterMetricType( // generated from firefox_home_page.recently_saved_reading_item
            CommonMetricData(
                category: "firefox_home_page",
                name: "recently_saved_reading_item",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Counts the number of times a user taps the Show All
        /// button of the Recently Saved Section
        static let recentlySavedShowAll = CounterMetricType( // generated from firefox_home_page.recently_saved_show_all
            CommonMetricData(
                category: "firefox_home_page",
                name: "recently_saved_show_all",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        private static let recentlySavedShowAllOriginLabel = CounterMetricType( // generated from firefox_home_page.recently_saved_show_all_origin
            CommonMetricData(
                category: "firefox_home_page",
                name: "recently_saved_show_all_origin",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Counts the number of times a user taps the Show All
        /// button of the Recently Saved Section,
        /// with a home page origin.
        static let recentlySavedShowAllOrigin = try! LabeledMetricType<CounterMetricType>( // generated from firefox_home_page.recently_saved_show_all_origin
            category: "firefox_home_page",
            name: "recently_saved_show_all_origin",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false,
            subMetric: recentlySavedShowAllOriginLabel,
            labels: ["origin-other", "zero-search"]
        )

        /// Counts the number of times a user taps to open a
        /// synced tab from the Jump Back In section
        static let syncedTabOpened = CounterMetricType( // generated from firefox_home_page.synced_tab_opened
            CommonMetricData(
                category: "firefox_home_page",
                name: "synced_tab_opened",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        private static let syncedTabOpenedOriginLabel = CounterMetricType( // generated from firefox_home_page.synced_tab_opened_origin
            CommonMetricData(
                category: "firefox_home_page",
                name: "synced_tab_opened_origin",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Counts the number of times a user taps to open a
        /// synced tab from the Jump Back In section,
        /// with a home page origin.
        static let syncedTabOpenedOrigin = try! LabeledMetricType<CounterMetricType>( // generated from firefox_home_page.synced_tab_opened_origin
            category: "firefox_home_page",
            name: "synced_tab_opened_origin",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false,
            subMetric: syncedTabOpenedOriginLabel,
            labels: ["origin-other", "zero-search"]
        )

        /// Counts the number of times a user taps the
        /// Show All button of Synced Tab in the Jump Back In section.
        static let syncedTabShowAll = CounterMetricType( // generated from firefox_home_page.synced_tab_show_all
            CommonMetricData(
                category: "firefox_home_page",
                name: "synced_tab_show_all",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        private static let syncedTabShowAllOriginLabel = CounterMetricType( // generated from firefox_home_page.synced_tab_show_all_origin
            CommonMetricData(
                category: "firefox_home_page",
                name: "synced_tab_show_all_origin",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Counts the number of times a user taps the
        /// Show All button of Synced Tab in the Jump Back In section,
        /// with a home page origin.
        static let syncedTabShowAllOrigin = try! LabeledMetricType<CounterMetricType>( // generated from firefox_home_page.synced_tab_show_all_origin
            category: "firefox_home_page",
            name: "synced_tab_show_all_origin",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false,
            subMetric: syncedTabShowAllOriginLabel,
            labels: ["origin-other", "zero-search"]
        )

        /// Counts the number of times a user sees the
        /// Synced Tab tile on the homepage
        static let syncedTabTileView = CounterMetricType( // generated from firefox_home_page.synced_tab_tile_view
            CommonMetricData(
                category: "firefox_home_page",
                name: "synced_tab_tile_view",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

    }

    enum FxSuggest {
        /// The name of the advertiser providing the sponsored suggestion
        static let advertiser = StringMetricType( // generated from fx_suggest.advertiser
            CommonMetricData(
                category: "fx_suggest",
                name: "advertiser",
                sendInPings: ["fx-suggest"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// A unique identifier for a sponsored suggestion. Not set for non-sponsored
        /// suggestions.
        static let blockId = QuantityMetricType( // generated from fx_suggest.block_id
            CommonMetricData(
                category: "fx_suggest",
                name: "block_id",
                sendInPings: ["fx-suggest"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// An identifier to identify users for Contextual Services user interaction pings.
        static let contextId = UuidMetricType( // generated from fx_suggest.context_id
            CommonMetricData(
                category: "fx_suggest",
                name: "context_id",
                sendInPings: ["fx-suggest"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// The suggestion's advertising category. "22 - Shopping" for sponsored
        /// suggestions.
        /// Not set for non-sponsored suggestions.
        static let iabCategory = StringMetricType( // generated from fx_suggest.iab_category
            CommonMetricData(
                category: "fx_suggest",
                name: "iab_category",
                sendInPings: ["fx-suggest"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// If `ping_type` is "fxsuggest-impression", indicates whether this impression is
        /// for a clicked suggestion. If `ping_type` is "fxsuggest-click", always `true`.
        static let isClicked = BooleanMetricType( // generated from fx_suggest.is_clicked
            CommonMetricData(
                category: "fx_suggest",
                name: "is_clicked",
                sendInPings: ["fx-suggest"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// The ping's type. Either "fxsuggest-click" or "fxsuggest-impression".
        static let pingType = StringMetricType( // generated from fx_suggest.ping_type
            CommonMetricData(
                category: "fx_suggest",
                name: "ping_type",
                sendInPings: ["fx-suggest"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// The position (1-based) of this suggestion in the full list of suggestions,
        /// relative to the top of the awesomebar.
        static let position = QuantityMetricType( // generated from fx_suggest.position
            CommonMetricData(
                category: "fx_suggest",
                name: "position",
                sendInPings: ["fx-suggest"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// If this ping is for a sponsored suggestion, the partner URL for reporting this
        /// interaction.
        /// Not set for non-sponsored suggestions.
        static let reportingUrl = UrlMetricType( // generated from fx_suggest.reporting_url
            CommonMetricData(
                category: "fx_suggest",
                name: "reporting_url",
                sendInPings: ["fx-suggest"],
                lifetime: .ping,
                disabled: false
            )
        )

    }

    enum Homepage {
        struct ItemTappedExtra: EventExtras {
            var section: String?
            var type: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let section = self.section {
                    record["section"] = String(section)
                }
                if let type = self.type {
                    record["type"] = String(type)
                }

                return record
            }
        }

        /// Records when an item has been tapped on the homepage.
        static let itemTapped = EventMetricType<ItemTappedExtra>( // generated from homepage.item_tapped
            CommonMetricData(
                category: "homepage",
                name: "item_tapped",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["section", "type"]
        )

        private static let sectionViewedLabel = CounterMetricType( // generated from homepage.section_viewed
            CommonMetricData(
                category: "homepage",
                name: "section_viewed",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Records when a section has been viewed on the homepage. See `homepage.viewed`
        /// for more details on what is considered a homepage view. This event refers to a
        /// section that has been scrolled to or seen on an homepage that has been viewed.
        /// The labels matches the values in `HomepageTelemetry.ItemType` under
        /// `sectionName`
        static let sectionViewed = try! LabeledMetricType<CounterMetricType>( // generated from homepage.section_viewed
            category: "homepage",
            name: "section_viewed",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false,
            subMetric: sectionViewedLabel,
            labels: ["bookmarks", "customize_homepage", "jump_back_in", "stories", "top_sites"]
        )

        /// Records when the Firefox homepage is viewed. We consider a `view` to be if a
        /// user navigates to a new homepage whether through opening a new tab, navigating
        /// from a webpage, or after selecting the address bar. Seeing the homepage again
        /// after viewing a modal that is not full screen does not trigger a view.
        static let viewed = EventMetricType<NoExtras>( // generated from homepage.viewed
            CommonMetricData(
                category: "homepage",
                name: "viewed",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

    }

    enum InstalledMozillaProducts {
        /// If Focus is installed on the users's device.
        static let focus = BooleanMetricType( // generated from installed_mozilla_products.focus
            CommonMetricData(
                category: "installed_mozilla_products",
                name: "focus",
                sendInPings: ["metrics"],
                lifetime: .application,
                disabled: false
            )
        )

        /// If Klar is installed on the users's device.
        static let klar = BooleanMetricType( // generated from installed_mozilla_products.klar
            CommonMetricData(
                category: "installed_mozilla_products",
                name: "klar",
                sendInPings: ["metrics"],
                lifetime: .application,
                disabled: false
            )
        )

    }

    enum KeyCommands {
        struct PressKeyCommandActionExtra: EventExtras {
            var action: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let action = self.action {
                    record["action"] = String(action)
                }

                return record
            }
        }

        /// Records when a key command action is triggered
        static let pressKeyCommandAction = EventMetricType<PressKeyCommandActionExtra>( // generated from key_commands.press_key_command_action
            CommonMetricData(
                category: "key_commands",
                name: "press_key_command_action",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["action"]
        )

    }

    enum LegacyIds {
        /// The client id from legacy telemetry.
        static let clientId = UuidMetricType( // generated from legacy.ids.client_id
            CommonMetricData(
                category: "legacy.ids",
                name: "client_id",
                sendInPings: ["deletion-request", "metrics"],
                lifetime: .user,
                disabled: false
            )
        )

    }

    enum Messaging {
        struct ClickedExtra: EventExtras {
            var actionUuid: String?
            var messageKey: String?
            var messageSurface: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let actionUuid = self.actionUuid {
                    record["action_uuid"] = String(actionUuid)
                }
                if let messageKey = self.messageKey {
                    record["message_key"] = String(messageKey)
                }
                if let messageSurface = self.messageSurface {
                    record["message_surface"] = String(messageSurface)
                }

                return record
            }
        }

        struct DismissedExtra: EventExtras {
            var messageKey: String?
            var messageSurface: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let messageKey = self.messageKey {
                    record["message_key"] = String(messageKey)
                }
                if let messageSurface = self.messageSurface {
                    record["message_surface"] = String(messageSurface)
                }

                return record
            }
        }

        struct ExpiredExtra: EventExtras {
            var messageKey: String?
            var messageSurface: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let messageKey = self.messageKey {
                    record["message_key"] = String(messageKey)
                }
                if let messageSurface = self.messageSurface {
                    record["message_surface"] = String(messageSurface)
                }

                return record
            }
        }

        struct MalformedExtra: EventExtras {
            var messageKey: String?
            var messageSurface: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let messageKey = self.messageKey {
                    record["message_key"] = String(messageKey)
                }
                if let messageSurface = self.messageSurface {
                    record["message_surface"] = String(messageSurface)
                }

                return record
            }
        }

        struct ShownExtra: EventExtras {
            var messageKey: String?
            var messageSurface: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let messageKey = self.messageKey {
                    record["message_key"] = String(messageKey)
                }
                if let messageSurface = self.messageSurface {
                    record["message_surface"] = String(messageSurface)
                }

                return record
            }
        }

        /// A message was clicked by the user.
        static let clicked = EventMetricType<ClickedExtra>( // generated from messaging.clicked
            CommonMetricData(
                category: "messaging",
                name: "clicked",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["action_uuid", "message_key", "message_surface"]
        )

        /// A message was dismissed by the user.
        static let dismissed = EventMetricType<DismissedExtra>( // generated from messaging.dismissed
            CommonMetricData(
                category: "messaging",
                name: "dismissed",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["message_key", "message_surface"]
        )

        /// A message's max display count has been reached.
        static let expired = EventMetricType<ExpiredExtra>( // generated from messaging.expired
            CommonMetricData(
                category: "messaging",
                name: "expired",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["message_key", "message_surface"]
        )

        /// A message was malformed.
        static let malformed = EventMetricType<MalformedExtra>( // generated from messaging.malformed
            CommonMetricData(
                category: "messaging",
                name: "malformed",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["message_key", "message_surface"]
        )

        /// A message was shown to the user.
        static let shown = EventMetricType<ShownExtra>( // generated from messaging.shown
            CommonMetricData(
                category: "messaging",
                name: "shown",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["message_key", "message_surface"]
        )

    }

    enum NimbusSystem {
        struct RecordedNimbusContextObject: Codable, Equatable, ObjectSerialize {
          var isFirstRun: Bool?
          var eventQueryValues: RecordedNimbusContextObjectItemEventQueryValuesObject?
          var isPhone: Bool?
          var appVersion: String?
          var locale: String?
          var daysSinceInstall: Int64?
          var daysSinceUpdate: Int64?
          var language: String?
          var region: String?
          var isDefaultBrowser: Bool?
          var isBottomToolbarUser: Bool?
          var hasEnabledTipsNotifications: Bool?
          var isAppleIntelligenceAvailable: Bool?
          var cannotUseAppleIntelligence: Bool?

        func intoSerializedObject() -> String {
            let jsonEncoder = JSONEncoder()
            let jsonData = try! jsonEncoder.encode(self)
            let json = String(data: jsonData, encoding: String.Encoding.utf8)!
            return json
        }
    }

        struct RecordedNimbusContextObjectItemEventQueryValuesObject: Codable, Equatable, ObjectSerialize {
          var daysOpenedInLast28: Int64?

        func intoSerializedObject() -> String {
            let jsonEncoder = JSONEncoder()
            let jsonData = try! jsonEncoder.encode(self)
            let json = String(data: jsonData, encoding: String.Encoding.utf8)!
            return json
        }
    }


        /// The Nimbus context object that is recorded to Glean
        static let recordedNimbusContext = ObjectMetricType<RecordedNimbusContextObject>( // generated from nimbus_system.recorded_nimbus_context
            CommonMetricData(
                category: "nimbus_system",
                name: "recorded_nimbus_context",
                sendInPings: ["nimbus"],
                lifetime: .ping,
                disabled: false
            )
        )

    }

    enum Onboarding {
        struct CardViewExtra: EventExtras {
            var cardType: String?
            var flowType: String?
            var sequenceId: String?
            var sequencePosition: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let cardType = self.cardType {
                    record["card_type"] = String(cardType)
                }
                if let flowType = self.flowType {
                    record["flow_type"] = String(flowType)
                }
                if let sequenceId = self.sequenceId {
                    record["sequence_id"] = String(sequenceId)
                }
                if let sequencePosition = self.sequencePosition {
                    record["sequence_position"] = String(sequencePosition)
                }

                return record
            }
        }

        struct CloseTapExtra: EventExtras {
            var cardType: String?
            var flowType: String?
            var sequenceId: String?
            var sequencePosition: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let cardType = self.cardType {
                    record["card_type"] = String(cardType)
                }
                if let flowType = self.flowType {
                    record["flow_type"] = String(flowType)
                }
                if let sequenceId = self.sequenceId {
                    record["sequence_id"] = String(sequenceId)
                }
                if let sequencePosition = self.sequencePosition {
                    record["sequence_position"] = String(sequencePosition)
                }

                return record
            }
        }

        struct MultipleChoiceButtonTapExtra: EventExtras {
            var buttonAction: String?
            var cardType: String?
            var flowType: String?
            var sequenceId: String?
            var sequencePosition: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let buttonAction = self.buttonAction {
                    record["button_action"] = String(buttonAction)
                }
                if let cardType = self.cardType {
                    record["card_type"] = String(cardType)
                }
                if let flowType = self.flowType {
                    record["flow_type"] = String(flowType)
                }
                if let sequenceId = self.sequenceId {
                    record["sequence_id"] = String(sequenceId)
                }
                if let sequencePosition = self.sequencePosition {
                    record["sequence_position"] = String(sequencePosition)
                }

                return record
            }
        }

        struct NotificationPermissionPromptExtra: EventExtras {
            var granted: Bool?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let granted = self.granted {
                    record["granted"] = String(granted)
                }

                return record
            }
        }

        struct PrimaryButtonTapExtra: EventExtras {
            var buttonAction: String?
            var cardType: String?
            var flowType: String?
            var sequenceId: String?
            var sequencePosition: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let buttonAction = self.buttonAction {
                    record["button_action"] = String(buttonAction)
                }
                if let cardType = self.cardType {
                    record["card_type"] = String(cardType)
                }
                if let flowType = self.flowType {
                    record["flow_type"] = String(flowType)
                }
                if let sequenceId = self.sequenceId {
                    record["sequence_id"] = String(sequenceId)
                }
                if let sequencePosition = self.sequencePosition {
                    record["sequence_position"] = String(sequencePosition)
                }

                return record
            }
        }

        struct SecondaryButtonTapExtra: EventExtras {
            var buttonAction: String?
            var cardType: String?
            var flowType: String?
            var sequenceId: String?
            var sequencePosition: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let buttonAction = self.buttonAction {
                    record["button_action"] = String(buttonAction)
                }
                if let cardType = self.cardType {
                    record["card_type"] = String(cardType)
                }
                if let flowType = self.flowType {
                    record["flow_type"] = String(flowType)
                }
                if let sequenceId = self.sequenceId {
                    record["sequence_id"] = String(sequenceId)
                }
                if let sequencePosition = self.sequencePosition {
                    record["sequence_position"] = String(sequencePosition)
                }

                return record
            }
        }

        struct ToggleAutomaticCrashReportsExtra: EventExtras {
            var changedTo: Bool?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let changedTo = self.changedTo {
                    record["changed_to"] = String(changedTo)
                }

                return record
            }
        }

        struct ToggleTechnicalInteractionDataExtra: EventExtras {
            var changedTo: Bool?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let changedTo = self.changedTo {
                    record["changed_to"] = String(changedTo)
                }

                return record
            }
        }

        struct WallpaperSelectedExtra: EventExtras {
            var wallpaperName: String?
            var wallpaperType: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let wallpaperName = self.wallpaperName {
                    record["wallpaper_name"] = String(wallpaperName)
                }
                if let wallpaperType = self.wallpaperType {
                    record["wallpaper_type"] = String(wallpaperType)
                }

                return record
            }
        }

        struct WallpaperSelectorSelectedExtra: EventExtras {
            var wallpaperName: String?
            var wallpaperType: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let wallpaperName = self.wallpaperName {
                    record["wallpaper_name"] = String(wallpaperName)
                }
                if let wallpaperType = self.wallpaperType {
                    record["wallpaper_type"] = String(wallpaperType)
                }

                return record
            }
        }

        /// Records when an onboarding card is shown
        static let cardView = EventMetricType<CardViewExtra>( // generated from onboarding.card_view
            CommonMetricData(
                category: "onboarding",
                name: "card_view",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["card_type", "flow_type", "sequence_id", "sequence_position"]
        )

        /// Records when the user closes the onboarding.
        static let closeTap = EventMetricType<CloseTapExtra>( // generated from onboarding.close_tap
            CommonMetricData(
                category: "onboarding",
                name: "close_tap",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["card_type", "flow_type", "sequence_id", "sequence_position"]
        )

        /// Records the cancelation of a scheduled engagement notification.
        static let engagementNotificationCancel = EventMetricType<NoExtras>( // generated from onboarding.engagement_notification_cancel
            CommonMetricData(
                category: "onboarding",
                name: "engagement_notification_cancel",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// Records the users interaction with the engagement notification.
        static let engagementNotificationTapped = EventMetricType<NoExtras>( // generated from onboarding.engagement_notification_tapped
            CommonMetricData(
                category: "onboarding",
                name: "engagement_notification_tapped",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// Records when a multiple choice button is tapped during the onboarding
        static let multipleChoiceButtonTap = EventMetricType<MultipleChoiceButtonTapExtra>( // generated from onboarding.multiple_choice_button_tap
            CommonMetricData(
                category: "onboarding",
                name: "multiple_choice_button_tap",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["button_action", "card_type", "flow_type", "sequence_id", "sequence_position"]
        )

        /// Records the users decision to enable/disable notifications.
        static let notificationPermissionPrompt = EventMetricType<NotificationPermissionPromptExtra>( // generated from onboarding.notification_permission_prompt
            CommonMetricData(
                category: "onboarding",
                name: "notification_permission_prompt",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["granted"]
        )

        /// Records when the primary button is tap during the onboarding
        static let primaryButtonTap = EventMetricType<PrimaryButtonTapExtra>( // generated from onboarding.primary_button_tap
            CommonMetricData(
                category: "onboarding",
                name: "primary_button_tap",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["button_action", "card_type", "flow_type", "sequence_id", "sequence_position"]
        )

        /// Records when the secondary button is tap during the onboarding
        static let secondaryButtonTap = EventMetricType<SecondaryButtonTapExtra>( // generated from onboarding.secondary_button_tap
            CommonMetricData(
                category: "onboarding",
                name: "secondary_button_tap",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["button_action", "card_type", "flow_type", "sequence_id", "sequence_position"]
        )

        /// User clicked accept button on the terms of service onboarding card.
        static let termsOfServiceAccepted = EventMetricType<NoExtras>( // generated from onboarding.terms_of_service_accepted
            CommonMetricData(
                category: "onboarding",
                name: "terms_of_service_accepted",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// User viewed the terms of service onboarding card.
        static let termsOfServiceCard = EventMetricType<NoExtras>( // generated from onboarding.terms_of_service_card
            CommonMetricData(
                category: "onboarding",
                name: "terms_of_service_card",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// User clicked the terms of service link on the onboarding card.
        static let termsOfServiceLinkClicked = EventMetricType<NoExtras>( // generated from onboarding.terms_of_service_link_clicked
            CommonMetricData(
                category: "onboarding",
                name: "terms_of_service_link_clicked",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// User clicked the manage link on the terms of service onboarding card.
        static let termsOfServiceManageLinkClicked = EventMetricType<NoExtras>( // generated from onboarding.terms_of_service_manage_link_clicked
            CommonMetricData(
                category: "onboarding",
                name: "terms_of_service_manage_link_clicked",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// User clicked the privacy policy link on the terms of service onboarding card.
        static let termsOfServicePrivacyNoticeLinkClicked = EventMetricType<NoExtras>( // generated from onboarding.terms_of_service_privacy_notice_link_clicked
            CommonMetricData(
                category: "onboarding",
                name: "terms_of_service_privacy_notice_link_clicked",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// User toggled the preference to automatically send crash reports from the manage
        /// modal on the terms of service onboarding card.
        static let toggleAutomaticCrashReports = EventMetricType<ToggleAutomaticCrashReportsExtra>( // generated from onboarding.toggle_automatic_crash_reports
            CommonMetricData(
                category: "onboarding",
                name: "toggle_automatic_crash_reports",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["changed_to"]
        )

        /// User toggled the preference to share technical and interaction data from the
        /// manage modal on the terms of service onboarding card.
        static let toggleTechnicalInteractionData = EventMetricType<ToggleTechnicalInteractionDataExtra>( // generated from onboarding.toggle_technical_interaction_data
            CommonMetricData(
                category: "onboarding",
                name: "toggle_technical_interaction_data",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["changed_to"]
        )

        /// Recorded when the user selects a wallpaper from
        /// the wallpaper onboarding screen.
        static let wallpaperSelected = EventMetricType<WallpaperSelectedExtra>( // generated from onboarding.wallpaper_selected
            CommonMetricData(
                category: "onboarding",
                name: "wallpaper_selected",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["wallpaper_name", "wallpaper_type"]
        )

        /// Recorded when the wallpaper onboarding bottom sheet
        /// is dismissed by the user.
        static let wallpaperSelectorClose = EventMetricType<NoExtras>( // generated from onboarding.wallpaper_selector_close
            CommonMetricData(
                category: "onboarding",
                name: "wallpaper_selector_close",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// Recorded when the user selects a wallpaper from
        /// the wallpaper onboarding bottom sheet. Wallpaper information
        /// is sent in the extra keys.
        static let wallpaperSelectorSelected = EventMetricType<WallpaperSelectorSelectedExtra>( // generated from onboarding.wallpaper_selector_selected
            CommonMetricData(
                category: "onboarding",
                name: "wallpaper_selector_selected",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["wallpaper_name", "wallpaper_type"]
        )

        /// Recorded when the wallpaper onboarding bottom sheet is shown to the user.
        static let wallpaperSelectorView = EventMetricType<NoExtras>( // generated from onboarding.wallpaper_selector_view
            CommonMetricData(
                category: "onboarding",
                name: "wallpaper_selector_view",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

    }

    enum Pocket {
        /// A user opens a new private tab based on a pocket story item
        static let openInPrivateTab = EventMetricType<NoExtras>( // generated from pocket.open_in_private_tab
            CommonMetricData(
                category: "pocket",
                name: "open_in_private_tab",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        private static let openStoryOriginLabel = CounterMetricType( // generated from pocket.open_story_origin
            CommonMetricData(
                category: "pocket",
                name: "open_story_origin",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Records when a user opens Pocket article from
        /// Firefox Home Pocket feed, with a home page origin.
        static let openStoryOrigin = try! LabeledMetricType<CounterMetricType>( // generated from pocket.open_story_origin
            category: "pocket",
            name: "open_story_origin",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false,
            subMetric: openStoryOriginLabel,
            labels: ["origin-other", "zero-search"]
        )

        private static let openStoryPositionLabel = CounterMetricType( // generated from pocket.open_story_position
            CommonMetricData(
                category: "pocket",
                name: "open_story_position",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Counts when a user opens Pocket article from
        /// Firefox Home Pocket feed.
        /// The label is position of tile i.e. 0,1,2...
        static let openStoryPosition = try! LabeledMetricType<CounterMetricType>( // generated from pocket.open_story_position
            category: "pocket",
            name: "open_story_position",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false,
            subMetric: openStoryPositionLabel,
            labels: nil
        )

        /// Counts when a user gets to pocket section
        /// on Firefox Home
        static let sectionImpressions = CounterMetricType( // generated from pocket.section_impressions
            CommonMetricData(
                category: "pocket",
                name: "section_impressions",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

    }

    enum PrivateBrowsing {
        struct DataClearanceIconTappedExtra: EventExtras {
            var didConfirm: Bool?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let didConfirm = self.didConfirm {
                    record["did_confirm"] = String(didConfirm)
                }

                return record
            }
        }

        /// Records when the private browsing button is tapped.
        static let dataClearanceIconTapped = EventMetricType<DataClearanceIconTappedExtra>( // generated from private_browsing.data_clearance_icon_tapped
            CommonMetricData(
                category: "private_browsing",
                name: "data_clearance_icon_tapped",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["did_confirm"]
        )

    }

    enum QrCode {
        /// Counts the number of times a QR code is scanned.
        static let scanned = CounterMetricType( // generated from qr_code.scanned
            CommonMetricData(
                category: "qr_code",
                name: "scanned",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

    }

    enum Search {
        private static let countsLabel = CounterMetricType( // generated from search.counts
            CommonMetricData(
                category: "search",
                name: "counts",
                sendInPings: ["baseline", "metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// The labels for this counter are `{search-engine-name}.{source}`
        /// 
        /// If the search engine is bundled with Firefox-iOS, then
        /// `search-engine-name` will be the name of the search engine. If
        /// it is a custom search engine, the value will be `custom`.
        /// 
        /// The value of `source` will reflect the source from which the
        /// search started.  One of:
        /// * quicksearch
        /// * suggestion
        /// * actionbar
        static let counts = try! LabeledMetricType<CounterMetricType>( // generated from search.counts
            category: "search",
            name: "counts",
            sendInPings: ["baseline", "metrics"],
            lifetime: .ping,
            disabled: false,
            subMetric: countsLabel,
            labels: nil
        )

        /// The default search engine identifier if the search engine is
        /// pre-loaded with Firefox-iOS.  If it's a custom search engine,
        /// then the value will be 'custom'.
        static let defaultEngine = StringMetricType( // generated from search.default_engine
            CommonMetricData(
                category: "search",
                name: "default_engine",
                sendInPings: ["baseline", "metrics"],
                lifetime: .application,
                disabled: false
            )
        )

        private static let googleTopsitePressedLabel = CounterMetricType( // generated from search.google_topsite_pressed
            CommonMetricData(
                category: "search",
                name: "google_topsite_pressed",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Counts the number of times the google top site button
        /// is pressed
        static let googleTopsitePressed = try! LabeledMetricType<CounterMetricType>( // generated from search.google_topsite_pressed
            category: "search",
            name: "google_topsite_pressed",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false,
            subMetric: googleTopsitePressedLabel,
            labels: nil
        )

        private static let inContentLabel = CounterMetricType( // generated from search.in_content
            CommonMetricData(
                category: "search",
                name: "in_content",
                sendInPings: ["baseline", "metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Records the type of interaction a user has on SERP pages.
        static let inContent = try! LabeledMetricType<CounterMetricType>( // generated from search.in_content
            category: "search",
            name: "in_content",
            sendInPings: ["baseline", "metrics"],
            lifetime: .ping,
            disabled: false,
            subMetric: inContentLabel,
            labels: nil
        )

        /// Counts the number of times the start search button is
        /// pressed
        static let startSearchPressed = CounterMetricType( // generated from search.start_search_pressed
            CommonMetricData(
                category: "search",
                name: "start_search_pressed",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

    }

    enum SettingsMenu {
        /// Records when the user taps Passwords in the settings menu
        static let passwords = EventMetricType<NoExtras>( // generated from settings_menu.passwords
            CommonMetricData(
                category: "settings_menu",
                name: "passwords",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// Counts the number of times setting as default
        /// browser menu option is tapped.
        static let setAsDefaultBrowserPressed = CounterMetricType( // generated from settings_menu.set_as_default_browser_pressed
            CommonMetricData(
                category: "settings_menu",
                name: "set_as_default_browser_pressed",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Metric recorded when a user taps on the Show Tour option
        /// from the app settings menu.
        static let showTourPressed = EventMetricType<NoExtras>( // generated from settings_menu.show_tour_pressed
            CommonMetricData(
                category: "settings_menu",
                name: "show_tour_pressed",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

    }

    enum Share {
        /// Track the startup time of the application when the app was launched to open a
        /// url.
        static let deeplinkOpenUrlStartupTime = TimingDistributionMetricType( // generated from share.deeplink_open_url_startup_time
            CommonMetricData(
                category: "share",
                name: "deeplink_open_url_startup_time",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
            , .nanosecond
        )

    }

    enum Sync {
        /// Counts the number of times a user taps
        /// on create account button in sync library view
        static let createAccountPressed = CounterMetricType( // generated from sync.create_account_pressed
            CommonMetricData(
                category: "sync",
                name: "create_account_pressed",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// A user tapped disconnect sync in fxa page.
        static let disconnect = EventMetricType<NoExtras>( // generated from sync.disconnect
            CommonMetricData(
                category: "sync",
                name: "disconnect",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// Recorded when user successfully logs in
        static let loginCompletedView = EventMetricType<NoExtras>( // generated from sync.login_completed_view
            CommonMetricData(
                category: "sync",
                name: "login_completed_view",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// Recorded when user is on fxa webpage to confirm signin token
        static let loginTokenView = EventMetricType<NoExtras>( // generated from sync.login_token_view
            CommonMetricData(
                category: "sync",
                name: "login_token_view",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// Recorded when user opens login fxa page
        static let loginView = EventMetricType<NoExtras>( // generated from sync.login_view
            CommonMetricData(
                category: "sync",
                name: "login_view",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// Counts the number of times a user opens
        /// synced tab
        static let openTab = CounterMetricType( // generated from sync.open_tab
            CommonMetricData(
                category: "sync",
                name: "open_tab",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// A user scanned QR code to attempt to sign in.
        static let paired = EventMetricType<NoExtras>( // generated from sync.paired
            CommonMetricData(
                category: "sync",
                name: "paired",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// Recorded when user is on fxa webpage to confirm signup code
        static let registrationCodeView = EventMetricType<NoExtras>( // generated from sync.registration_code_view
            CommonMetricData(
                category: "sync",
                name: "registration_code_view",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// Recorded when user opens successfully completes registration
        static let registrationCompletedView = EventMetricType<NoExtras>( // generated from sync.registration_completed_view
            CommonMetricData(
                category: "sync",
                name: "registration_completed_view",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// Recorded when user opens a registration fxa page
        static let registrationView = EventMetricType<NoExtras>( // generated from sync.registration_view
            CommonMetricData(
                category: "sync",
                name: "registration_view",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// Counts the number of times a user taps
        /// on sign in to sync button in sync
        /// library view
        static let signInSyncPressed = CounterMetricType( // generated from sync.sign_in_sync_pressed
            CommonMetricData(
                category: "sync",
                name: "sign_in_sync_pressed",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// A user chose to use their email to attempt a sign in instead
        /// of scanning a QR code, counterpart to "scan_pairing".
        static let useEmail = EventMetricType<NoExtras>( // generated from sync.use_email
            CommonMetricData(
                category: "sync",
                name: "use_email",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

    }

    enum Tabs {
        struct RestoreTabsAlertExtra: EventExtras {
            var isEnabled: Bool?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let isEnabled = self.isEnabled {
                    record["is_enabled"] = String(isEnabled)
                }

                return record
            }
        }

        /// This counts the number of times a user navigates back in tab
        /// history by swiping from the left edge of the device to the right.
        static let navigateTabBackSwipe = CounterMetricType( // generated from tabs.navigate_tab_back_swipe
            CommonMetricData(
                category: "tabs",
                name: "navigate_tab_back_swipe",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// This counts the number of times a user taps the back
        /// button on a tab's toolbar.
        static let navigateTabHistoryBack = CounterMetricType( // generated from tabs.navigate_tab_history_back
            CommonMetricData(
                category: "tabs",
                name: "navigate_tab_history_back",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// This counts the number of times a user taps the forward
        /// button on a tab's toolbar.
        static let navigateTabHistoryForward = CounterMetricType( // generated from tabs.navigate_tab_history_forward
            CommonMetricData(
                category: "tabs",
                name: "navigate_tab_history_forward",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Record the number of URI's visited by the user.
        static let normalAndPrivateUriCount = CounterMetricType( // generated from tabs.normal_and_private_uri_count
            CommonMetricData(
                category: "tabs",
                name: "normal_and_private_uri_count",
                sendInPings: ["baseline", "metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Records when tab view button is pressed
        static let pressTabToolbar = EventMetricType<NoExtras>( // generated from tabs.press_tab_toolbar
            CommonMetricData(
                category: "tabs",
                name: "press_tab_toolbar",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// Records when a top tab is pressed
        static let pressTopTab = EventMetricType<NoExtras>( // generated from tabs.press_top_tab
            CommonMetricData(
                category: "tabs",
                name: "press_top_tab",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// Record event when user has executed pull to refresh.
        static let pullToRefresh = EventMetricType<NoExtras>( // generated from tabs.pull_to_refresh
            CommonMetricData(
                category: "tabs",
                name: "pull_to_refresh",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// Record event when user has discovered the Easter egg.
        static let pullToRefreshEasterEgg = EventMetricType<NoExtras>( // generated from tabs.pull_to_refresh_easter_egg
            CommonMetricData(
                category: "tabs",
                name: "pull_to_refresh_easter_egg",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// This counts the number of times a user taps the reload
        /// button in the URL bar.
        static let reloadFromUrlBar = CounterMetricType( // generated from tabs.reload_from_url_bar
            CommonMetricData(
                category: "tabs",
                name: "reload_from_url_bar",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Recorded when a users choose an option on the restore tabs alert
        static let restoreTabsAlert = EventMetricType<RestoreTabsAlertExtra>( // generated from tabs.restore_tabs_alert
            CommonMetricData(
                category: "tabs",
                name: "restore_tabs_alert",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["is_enabled"]
        )

        /// Counts how long it takes to switch to another tab
        static let tabSwitch = TimingDistributionMetricType( // generated from tabs.tab_switch
            CommonMetricData(
                category: "tabs",
                name: "tab_switch",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
            , .millisecond
        )

    }

    enum TopSites {
        struct ContextualMenuExtra: EventExtras {
            var type: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let type = self.type {
                    record["type"] = String(type)
                }

                return record
            }
        }

        struct ContileClickExtra: EventExtras {
            var position: Int32?
            var source: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let position = self.position {
                    record["position"] = String(position)
                }
                if let source = self.source {
                    record["source"] = String(source)
                }

                return record
            }
        }

        struct ContileImpressionExtra: EventExtras {
            var position: Int32?
            var source: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let position = self.position {
                    record["position"] = String(position)
                }
                if let source = self.source {
                    record["source"] = String(source)
                }

                return record
            }
        }

        struct TilePressedExtra: EventExtras {
            var position: String?
            var tileType: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let position = self.position {
                    record["position"] = String(position)
                }
                if let tileType = self.tileType {
                    record["tile_type"] = String(tileType)
                }

                return record
            }
        }

        /// A UUID that is unjoinable with other browser metrics. This ID will not be
        /// shared with AdM, only for internal uses. This ID is shared across all
        /// contextual services features.
        static let contextId = UuidMetricType( // generated from top_sites.context_id
            CommonMetricData(
                category: "top_sites",
                name: "context_id",
                sendInPings: ["topsites-impression"],
                lifetime: .application,
                disabled: false
            )
        )

        /// Records when a user clicks on a contextual
        /// menu option on top site
        static let contextualMenu = EventMetricType<ContextualMenuExtra>( // generated from top_sites.contextual_menu
            CommonMetricData(
                category: "top_sites",
                name: "contextual_menu",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["type"]
        )

        /// Advertiser brand for the sponsored TopSites tile
        static let contileAdvertiser = StringMetricType( // generated from top_sites.contile_advertiser
            CommonMetricData(
                category: "top_sites",
                name: "contile_advertiser",
                sendInPings: ["topsites-impression"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// A user clicked a Contile top site
        static let contileClick = EventMetricType<ContileClickExtra>( // generated from top_sites.contile_click
            CommonMetricData(
                category: "top_sites",
                name: "contile_click",
                sendInPings: ["events", "topsites-impression"],
                lifetime: .ping,
                disabled: false
            )
            , ["position", "source"]
        )

        /// A user saw a Contile top site
        static let contileImpression = EventMetricType<ContileImpressionExtra>( // generated from top_sites.contile_impression
            CommonMetricData(
                category: "top_sites",
                name: "contile_impression",
                sendInPings: ["events", "topsites-impression"],
                lifetime: .ping,
                disabled: false
            )
            , ["position", "source"]
        )

        /// The AdM reporting endpoint (impression_url for “impression” event,
        /// click_url for “click” event).
        static let contileReportingUrl = UrlMetricType( // generated from top_sites.contile_reporting_url
            CommonMetricData(
                category: "top_sites",
                name: "contile_reporting_url",
                sendInPings: ["topsites-impression"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// A unique identifier provided by the AdM for the sponsored TopSites tile
        static let contileTileId = QuantityMetricType( // generated from top_sites.contile_tile_id
            CommonMetricData(
                category: "top_sites",
                name: "contile_tile_id",
                sendInPings: ["topsites-impression"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// A user opens a new private tab based on a top site item
        static let openInPrivateTab = EventMetricType<NoExtras>( // generated from top_sites.open_in_private_tab
            CommonMetricData(
                category: "top_sites",
                name: "open_in_private_tab",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        private static let pressedTileOriginLabel = CounterMetricType( // generated from top_sites.pressed_tile_origin
            CommonMetricData(
                category: "top_sites",
                name: "pressed_tile_origin",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Records an event when user taps on top site tile,
        /// with a home page origin.
        static let pressedTileOrigin = try! LabeledMetricType<CounterMetricType>( // generated from top_sites.pressed_tile_origin
            category: "top_sites",
            name: "pressed_tile_origin",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false,
            subMetric: pressedTileOriginLabel,
            labels: ["origin-other", "zero-search"]
        )

        /// Tracks if the user has enabled sponsored shortcuts
        static let sponsoredShortcuts = BooleanMetricType( // generated from top_sites.sponsored_shortcuts
            CommonMetricData(
                category: "top_sites",
                name: "sponsored_shortcuts",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Records an event when user taps on top site tile.
        static let tilePressed = EventMetricType<TilePressedExtra>( // generated from top_sites.tile_pressed
            CommonMetricData(
                category: "top_sites",
                name: "tile_pressed",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["position", "tile_type"]
        )

    }

    enum Urlbar {
        struct AbandonmentExtra: EventExtras {
            var groups: String?
            var interaction: String?
            var nChars: Int32?
            var nResults: Int32?
            var nWords: Int32?
            var results: String?
            var sap: String?
            var searchMode: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let groups = self.groups {
                    record["groups"] = String(groups)
                }
                if let interaction = self.interaction {
                    record["interaction"] = String(interaction)
                }
                if let nChars = self.nChars {
                    record["n_chars"] = String(nChars)
                }
                if let nResults = self.nResults {
                    record["n_results"] = String(nResults)
                }
                if let nWords = self.nWords {
                    record["n_words"] = String(nWords)
                }
                if let results = self.results {
                    record["results"] = String(results)
                }
                if let sap = self.sap {
                    record["sap"] = String(sap)
                }
                if let searchMode = self.searchMode {
                    record["search_mode"] = String(searchMode)
                }

                return record
            }
        }

        struct EngagementExtra: EventExtras {
            var engagementType: String?
            var groups: String?
            var interaction: String?
            var nChars: Int32?
            var nResults: Int32?
            var nWords: Int32?
            var provider: String?
            var results: String?
            var sap: String?
            var searchMode: String?
            var selectedResult: String?
            var selectedResultSubtype: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let engagementType = self.engagementType {
                    record["engagement_type"] = String(engagementType)
                }
                if let groups = self.groups {
                    record["groups"] = String(groups)
                }
                if let interaction = self.interaction {
                    record["interaction"] = String(interaction)
                }
                if let nChars = self.nChars {
                    record["n_chars"] = String(nChars)
                }
                if let nResults = self.nResults {
                    record["n_results"] = String(nResults)
                }
                if let nWords = self.nWords {
                    record["n_words"] = String(nWords)
                }
                if let provider = self.provider {
                    record["provider"] = String(provider)
                }
                if let results = self.results {
                    record["results"] = String(results)
                }
                if let sap = self.sap {
                    record["sap"] = String(sap)
                }
                if let searchMode = self.searchMode {
                    record["search_mode"] = String(searchMode)
                }
                if let selectedResult = self.selectedResult {
                    record["selected_result"] = String(selectedResult)
                }
                if let selectedResultSubtype = self.selectedResultSubtype {
                    record["selected_result_subtype"] = String(selectedResultSubtype)
                }

                return record
            }
        }

        struct ImpressionExtra: EventExtras {
            var groups: String?
            var interaction: String?
            var nChars: Int32?
            var nResults: Int32?
            var nWords: Int32?
            var reason: String?
            var results: String?
            var sap: String?
            var searchMode: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let groups = self.groups {
                    record["groups"] = String(groups)
                }
                if let interaction = self.interaction {
                    record["interaction"] = String(interaction)
                }
                if let nChars = self.nChars {
                    record["n_chars"] = String(nChars)
                }
                if let nResults = self.nResults {
                    record["n_results"] = String(nResults)
                }
                if let nWords = self.nWords {
                    record["n_words"] = String(nWords)
                }
                if let reason = self.reason {
                    record["reason"] = String(reason)
                }
                if let results = self.results {
                    record["results"] = String(results)
                }
                if let sap = self.sap {
                    record["sap"] = String(sap)
                }
                if let searchMode = self.searchMode {
                    record["search_mode"] = String(searchMode)
                }

                return record
            }
        }

        /// Recorded when urlbar results are shown to the user
        static let abandonment = EventMetricType<AbandonmentExtra>( // generated from urlbar.abandonment
            CommonMetricData(
                category: "urlbar",
                name: "abandonment",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["groups", "interaction", "n_chars", "n_results", "n_words", "results", "sap", "search_mode"]
        )

        /// Recorded when the user executes an action on a result
        static let engagement = EventMetricType<EngagementExtra>( // generated from urlbar.engagement
            CommonMetricData(
                category: "urlbar",
                name: "engagement",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["engagement_type", "groups", "interaction", "n_chars", "n_results", "n_words", "provider", "results", "sap", "search_mode", "selected_result", "selected_result_subtype"]
        )

        /// Recorded when urlbar results are shown to the user
        static let impression = EventMetricType<ImpressionExtra>( // generated from urlbar.impression
            CommonMetricData(
                category: "urlbar",
                name: "impression",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["groups", "interaction", "n_chars", "n_results", "n_words", "reason", "results", "sap", "search_mode"]
        )

    }

    enum Usage {
        /// The build identifier generated by the CI system (e.g. "1234/A").
        /// If the value was not provided through configuration,
        /// this metric gets set to `Unknown`.
        static let appBuild = StringMetricType( // generated from usage.app_build
            CommonMetricData(
                category: "usage",
                name: "app_build",
                sendInPings: ["usage-reporting"],
                lifetime: .application,
                disabled: false
            )
        )

        /// The channel the application is being distributed on.
        static let appChannel = StringMetricType( // generated from usage.app_channel
            CommonMetricData(
                category: "usage",
                name: "app_channel",
                sendInPings: ["usage-reporting"],
                lifetime: .application,
                disabled: false
            )
        )

        /// The user visible version string (e.g. "1.0.3").
        /// If the value was not provided through configuration,
        /// this metric gets set to `Unknown`.
        static let appDisplayVersion = StringMetricType( // generated from usage.app_display_version
            CommonMetricData(
                category: "usage",
                name: "app_display_version",
                sendInPings: ["usage-reporting"],
                lifetime: .application,
                disabled: false
            )
        )

        /// The duration of the last foreground session.
        static let duration = TimespanMetricType( // generated from usage.duration
            CommonMetricData(
                category: "usage",
                name: "duration",
                sendInPings: ["usage-reporting"],
                lifetime: .ping,
                disabled: false
            )
            , .second
        )

        /// The date of the first run of the application.
        static let firstRunDate = DatetimeMetricType( // generated from usage.first_run_date
            CommonMetricData(
                category: "usage",
                name: "first_run_date",
                sendInPings: ["usage-reporting"],
                lifetime: .user,
                disabled: false
            )
            , .day
        )

        /// Was the app installed using MDM software.
        static let isManagedDevice = BooleanMetricType( // generated from usage.is_managed_device
            CommonMetricData(
                category: "usage",
                name: "is_managed_device",
                sendInPings: ["usage-reporting"],
                lifetime: .application,
                disabled: false
            )
        )

        /// The name of the operating system.
        /// Possible values:
        /// Android, iOS, Linux, Darwin, Windows,
        /// FreeBSD, NetBSD, OpenBSD, Solaris, Unknown
        static let os = StringMetricType( // generated from usage.os
            CommonMetricData(
                category: "usage",
                name: "os",
                sendInPings: ["usage-reporting"],
                lifetime: .application,
                disabled: false
            )
        )

        /// The user-visible version of the operating system (e.g. "1.2.3").
        /// If the version detection fails, this metric gets set to `Unknown`.
        static let osVersion = StringMetricType( // generated from usage.os_version
            CommonMetricData(
                category: "usage",
                name: "os_version",
                sendInPings: ["usage-reporting"],
                lifetime: .application,
                disabled: false
            )
        )

        /// A UUID uniquely identifying the profile,
        /// not shared with other telemetry data.
        static let profileId = UuidMetricType( // generated from usage.profile_id
            CommonMetricData(
                category: "usage",
                name: "profile_id",
                sendInPings: ["usage-deletion-request", "usage-reporting"],
                lifetime: .user,
                disabled: false
            )
        )

        /// The optional reason the ping was submitted.
        /// The specific values for reason are specific to each ping, and are
        /// documented in the ping's pings.yaml file.
        static let reason = StringMetricType( // generated from usage.reason
            CommonMetricData(
                category: "usage",
                name: "reason",
                sendInPings: ["usage-reporting"],
                lifetime: .ping,
                disabled: false
            )
        )

    }

    enum WallpaperAnalytics {
        struct WallpaperSelectedExtra: EventExtras {
            var wallpaperName: String?
            var wallpaperType: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let wallpaperName = self.wallpaperName {
                    record["wallpaper_name"] = String(wallpaperName)
                }
                if let wallpaperType = self.wallpaperType {
                    record["wallpaper_type"] = String(wallpaperType)
                }

                return record
            }
        }

        private static let themedWallpaperLabel = CounterMetricType( // generated from wallpaper_analytics.themed_wallpaper
            CommonMetricData(
                category: "wallpaper_analytics",
                name: "themed_wallpaper",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Recorded when the user enters the background. This reports
        /// the currently selected wallpaper if it's not the default.
        static let themedWallpaper = try! LabeledMetricType<CounterMetricType>( // generated from wallpaper_analytics.themed_wallpaper
            category: "wallpaper_analytics",
            name: "themed_wallpaper",
            sendInPings: ["metrics"],
            lifetime: .ping,
            disabled: false,
            subMetric: themedWallpaperLabel,
            labels: nil
        )

        /// Recorded when the user selects a wallpaper from
        /// the wallpaper settings screen. Wallpaper information
        /// is sent in the extra keys.
        static let wallpaperSelected = EventMetricType<WallpaperSelectedExtra>( // generated from wallpaper_analytics.wallpaper_selected
            CommonMetricData(
                category: "wallpaper_analytics",
                name: "wallpaper_selected",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["wallpaper_name", "wallpaper_type"]
        )

    }

    enum Webview {
        struct ProcessDidTerminateExtra: EventExtras {
            var consecutiveCrash: Int32?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let consecutiveCrash = self.consecutiveCrash {
                    record["consecutive_crash"] = String(consecutiveCrash)
                }

                return record
            }
        }

        struct ShowErrorPageExtra: EventExtras {
            var errorCode: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let errorCode = self.errorCode {
                    record["error_code"] = String(errorCode)
                }

                return record
            }
        }

        /// Recorded when an error occurred during navigation.
        static let didFail = EventMetricType<NoExtras>( // generated from webview.did_fail
            CommonMetricData(
                category: "webview",
                name: "did_fail",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// Recorded when an error occurs on early webview navigation.
        static let didFailProvisional = EventMetricType<NoExtras>( // generated from webview.did_fail_provisional
            CommonMetricData(
                category: "webview",
                name: "did_fail_provisional",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// Counts how long each page takes to load
        static let pageLoad = TimingDistributionMetricType( // generated from webview.page_load
            CommonMetricData(
                category: "webview",
                name: "page_load",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
            , .millisecond
        )

        /// Recorded when a webview process terminates and we attempt a reload of that
        /// webview.
        static let processDidTerminate = EventMetricType<ProcessDidTerminateExtra>( // generated from webview.process_did_terminate
            CommonMetricData(
                category: "webview",
                name: "process_did_terminate",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["consecutive_crash"]
        )

        /// Recorded when an error page is shown on the webview.
        static let showErrorPage = EventMetricType<ShowErrorPageExtra>( // generated from webview.show_error_page
            CommonMetricData(
                category: "webview",
                name: "show_error_page",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["error_code"]
        )

    }

    enum Widget {
        /// Counts how many times the large tabs widget opens url
        static let lTabsOpenUrl = CounterMetricType( // generated from widget.l_tabs_open_url
            CommonMetricData(
                category: "widget",
                name: "l_tabs_open_url",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Counts how many times medium quick action
        /// widget closes private tabs
        static let mQuickActionClosePrivate = CounterMetricType( // generated from widget.m_quick_action_close_private
            CommonMetricData(
                category: "widget",
                name: "m_quick_action_close_private",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Counts how many times medium quick action
        /// widget opens copied links
        static let mQuickActionCopiedLink = CounterMetricType( // generated from widget.m_quick_action_copied_link
            CommonMetricData(
                category: "widget",
                name: "m_quick_action_copied_link",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Counts how many times medium quick action
        /// widget opens firefox for private search
        static let mQuickActionPrivateSearch = CounterMetricType( // generated from widget.m_quick_action_private_search
            CommonMetricData(
                category: "widget",
                name: "m_quick_action_private_search",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Counts how many times medium quick action
        /// widget opens firefox for regular search
        static let mQuickActionSearch = CounterMetricType( // generated from widget.m_quick_action_search
            CommonMetricData(
                category: "widget",
                name: "m_quick_action_search",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Counts how many times the medium tabs widget opens url
        static let mTabsOpenUrl = CounterMetricType( // generated from widget.m_tabs_open_url
            CommonMetricData(
                category: "widget",
                name: "m_tabs_open_url",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Counts how many times user opens top site tabs
        static let mTopSitesWidget = CounterMetricType( // generated from widget.m_top_sites_widget
            CommonMetricData(
                category: "widget",
                name: "m_top_sites_widget",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Counts how many times small quick action
        /// widget opens firefox for regular search
        static let sQuickActionSearch = CounterMetricType( // generated from widget.s_quick_action_search
            CommonMetricData(
                category: "widget",
                name: "s_quick_action_search",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

    }

    enum Windows {
        /// A snapshot of how many windows the user has opened on iPad.
        static let ipadWindowCount = QuantityMetricType( // generated from windows.ipad_window_count
            CommonMetricData(
                category: "windows",
                name: "ipad_window_count",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

    }

    enum Microsurvey {
        struct ConfirmationShownExtra: EventExtras {
            var surveyId: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let surveyId = self.surveyId {
                    record["survey_id"] = String(surveyId)
                }

                return record
            }
        }

        struct DismissButtonTappedExtra: EventExtras {
            var surveyId: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let surveyId = self.surveyId {
                    record["survey_id"] = String(surveyId)
                }

                return record
            }
        }

        struct PrivacyNoticeTappedExtra: EventExtras {
            var surveyId: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let surveyId = self.surveyId {
                    record["survey_id"] = String(surveyId)
                }

                return record
            }
        }

        struct ShownExtra: EventExtras {
            var surveyId: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let surveyId = self.surveyId {
                    record["survey_id"] = String(surveyId)
                }

                return record
            }
        }

        struct SubmitButtonTappedExtra: EventExtras {
            var surveyId: String?
            var userSelection: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let surveyId = self.surveyId {
                    record["survey_id"] = String(surveyId)
                }
                if let userSelection = self.userSelection {
                    record["user_selection"] = String(userSelection)
                }

                return record
            }
        }

        /// Records that the confirmation message in the survey has been viewed by the
        /// user.
        static let confirmationShown = EventMetricType<ConfirmationShownExtra>( // generated from microsurvey.confirmation_shown
            CommonMetricData(
                category: "microsurvey",
                name: "confirmation_shown",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["survey_id"]
        )

        /// Records that the user tapped on the close button to dismiss the survey.
        static let dismissButtonTapped = EventMetricType<DismissButtonTappedExtra>( // generated from microsurvey.dismiss_button_tapped
            CommonMetricData(
                category: "microsurvey",
                name: "dismiss_button_tapped",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["survey_id"]
        )

        /// Records that the user tapped on the privacy notice.
        static let privacyNoticeTapped = EventMetricType<PrivacyNoticeTappedExtra>( // generated from microsurvey.privacy_notice_tapped
            CommonMetricData(
                category: "microsurvey",
                name: "privacy_notice_tapped",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["survey_id"]
        )

        /// The survey surface (bottom sheet) was shown and visible.
        static let shown = EventMetricType<ShownExtra>( // generated from microsurvey.shown
            CommonMetricData(
                category: "microsurvey",
                name: "shown",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["survey_id"]
        )

        /// Records that the user tapped on the submit button to respond to the survey.
        static let submitButtonTapped = EventMetricType<SubmitButtonTappedExtra>( // generated from microsurvey.submit_button_tapped
            CommonMetricData(
                category: "microsurvey",
                name: "submit_button_tapped",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["survey_id", "user_selection"]
        )

    }

    enum ReaderMode {
        /// Counts how many times the reader mode is closed.
        static let close = CounterMetricType( // generated from reader_mode.close
            CommonMetricData(
                category: "reader_mode",
                name: "close",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Counts how many times the reader mode is opened.
        static let open = CounterMetricType( // generated from reader_mode.open
            CommonMetricData(
                category: "reader_mode",
                name: "open",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

    }

    enum Preferences {
        struct AutoplaySettingChangedExtra: EventExtras {
            var mediaType: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let mediaType = self.mediaType {
                    record["media_type"] = String(mediaType)
                }

                return record
            }
        }

        struct ChangedExtra: EventExtras {
            var changedTo: String?
            var preference: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let changedTo = self.changedTo {
                    record["changed_to"] = String(changedTo)
                }
                if let preference = self.preference {
                    record["preference"] = String(preference)
                }

                return record
            }
        }

        /// Event for user changing the autoplay setting
        static let autoplaySettingChanged = EventMetricType<AutoplaySettingChangedExtra>( // generated from preferences.autoplay_setting_changed
            CommonMetricData(
                category: "preferences",
                name: "autoplay_setting_changed",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["media_type"]
        )

        /// Recorded when a preference is changed and includes the preference that
        /// changed as well as the value changed to recorded in the extra keys.
        /// 
        /// Note: This setting will soon be deprecated in favor of
        /// `settings.changed`, which also includes a new `changed_from` extra.
        /// 
        /// **Expiration:** This setting can be safely expired once the
        /// `settings.changed` implementation completely shadows the old
        /// `preferences.changed` implementation.
        static let changed = EventMetricType<ChangedExtra>( // generated from preferences.changed
            CommonMetricData(
                category: "preferences",
                name: "changed",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["changed_to", "preference"]
        )

        /// Measures the state of the "Close Private Tabs" preference.
        static let closePrivateTabs = BooleanMetricType( // generated from preferences.close_private_tabs
            CommonMetricData(
                category: "preferences",
                name: "close_private_tabs",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Measures the state of the fxa login.
        static let fxaLoggedIn = BooleanMetricType( // generated from preferences.fxa_logged_in
            CommonMetricData(
                category: "preferences",
                name: "fxa_logged_in",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// The setting a user chooses as their Home page. By default,
        /// it is initially set to Firefox Home.
        static let homePageSetting = StringMetricType( // generated from preferences.home_page_setting
            CommonMetricData(
                category: "preferences",
                name: "home_page_setting",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// What opening screen preference the user has selected under
        /// "Customize Home". "homepage," "last tab," or
        /// "homepage after 4 hours" default: "homepage after 4 hours".
        static let openingScreen = StringMetricType( // generated from preferences.opening_screen
            CommonMetricData(
                category: "preferences",
                name: "opening_screen",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Measures the state of the "Save Logins" preference.
        static let saveLogins = BooleanMetricType( // generated from preferences.save_logins
            CommonMetricData(
                category: "preferences",
                name: "save_logins",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// True if notifications for sync are allowed, otherwise false.
        static let syncNotifs = BooleanMetricType( // generated from preferences.sync_notifs
            CommonMetricData(
                category: "preferences",
                name: "sync_notifs",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// True if notifications for tips and features are allowed, otherwise false.
        static let tipsAndFeaturesNotifs = BooleanMetricType( // generated from preferences.tips_and_features_notifs
            CommonMetricData(
                category: "preferences",
                name: "tips_and_features_notifs",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

    }

    enum Settings {
        struct ChangedExtra: EventExtras {
            var changedFrom: String?
            var changedTo: String?
            var setting: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let changedFrom = self.changedFrom {
                    record["changed_from"] = String(changedFrom)
                }
                if let changedTo = self.changedTo {
                    record["changed_to"] = String(changedTo)
                }
                if let setting = self.setting {
                    record["setting"] = String(setting)
                }

                return record
            }
        }

        struct OptionSelectedExtra: EventExtras {
            var option: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let option = self.option {
                    record["option"] = String(option)
                }

                return record
            }
        }

        /// Recorded when the user changes a setting on a Settings screen. Records
        /// the new value, the previous value, and a key that uniquely identifies the
        /// setting irrespective of its placement in the Settings screens hierarchy.
        /// 
        /// This setting will eventually replace `preferences.changed`.
        static let changed = EventMetricType<ChangedExtra>( // generated from settings.changed
            CommonMetricData(
                category: "settings",
                name: "changed",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["changed_from", "changed_to", "setting"]
        )

        /// Recorded when the user taps an option to drill deeper into the
        /// settings menu screens.
        /// 
        /// For example, tapping the "App Icon >" option to show the app icon
        /// selection screen, or tapping "Browsing >" to view the browsing settings.
        static let optionSelected = EventMetricType<OptionSelectedExtra>( // generated from settings.option_selected
            CommonMetricData(
                category: "settings",
                name: "option_selected",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["option"]
        )

    }

    enum SettingsAppIcon {
        struct SelectedExtra: EventExtras {
            var newName: String?
            var oldName: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let newName = self.newName {
                    record["new_name"] = String(newName)
                }
                if let oldName = self.oldName {
                    record["old_name"] = String(oldName)
                }

                return record
            }
        }

        /// Records when the user changes their app icon in the app settings.
        static let selected = EventMetricType<SelectedExtra>( // generated from settings.app_icon.selected
            CommonMetricData(
                category: "settings.app_icon",
                name: "selected",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["new_name", "old_name"]
        )

    }

    enum SettingsZoomBar {
        struct DomainListItemSwipedToDeleteExtra: EventExtras {
            var index: Int32?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let index = self.index {
                    record["index"] = String(index)
                }

                return record
            }
        }

        /// Recorded when the user swipes to delete a specific zoom domain level in the app
        /// settings.
        static let domainListItemSwipedToDelete = EventMetricType<DomainListItemSwipedToDeleteExtra>( // generated from settings.zoom_bar.domain_list_item_swiped_to_delete
            CommonMetricData(
                category: "settings.zoom_bar",
                name: "domain_list_item_swiped_to_delete",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["index"]
        )

        /// Recorded when the user resets the list of zoom domain levels in the app
        /// settings.
        static let domainListResetButtonTapped = EventMetricType<NoExtras>( // generated from settings.zoom_bar.domain_list_reset_button_tapped
            CommonMetricData(
                category: "settings.zoom_bar",
                name: "domain_list_reset_button_tapped",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

    }

    enum ShareSheet {
        struct SharedToExtra: EventExtras {
            var activityIdentifier: String?
            var hasShareMessage: Bool?
            var shareType: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let activityIdentifier = self.activityIdentifier {
                    record["activity_identifier"] = String(activityIdentifier)
                }
                if let hasShareMessage = self.hasShareMessage {
                    record["has_share_message"] = String(hasShareMessage)
                }
                if let shareType = self.shareType {
                    record["share_type"] = String(shareType)
                }

                return record
            }
        }

        /// Records when the user has shared content out of the app via the iOS
        /// system share sheet. The extra values describe the app the user chose
        /// and the type of content being shared.
        /// 
        /// **Developer Note**: Telemetry is recorded for all shares that go through
        /// the `ShareManager` via the `ShareTelemetryActivityItemProvider` action.
        /// 
        /// Owner: @andy
        static let sharedTo = EventMetricType<SharedToExtra>( // generated from share_sheet.shared_to
            CommonMetricData(
                category: "share_sheet",
                name: "shared_to",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["activity_identifier", "has_share_message", "share_type"]
        )

    }

    enum InactiveTabsTray {
        struct ToggleInactiveTabTrayExtra: EventExtras {
            var toggleType: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let toggleType = self.toggleType {
                    record["toggle_type"] = String(toggleType)
                }

                return record
            }
        }

        /// Recorded when a user is shown inactive tab view
        static let inactiveTabShown = CounterMetricType( // generated from inactive_tabs_tray.inactive_tab_shown
            CommonMetricData(
                category: "inactive_tabs_tray",
                name: "inactive_tab_shown",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Recorded when a user swipes to close an inactive tab
        static let inactiveTabSwipeClose = CounterMetricType( // generated from inactive_tabs_tray.inactive_tab_swipe_close
            CommonMetricData(
                category: "inactive_tabs_tray",
                name: "inactive_tab_swipe_close",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Recorded when a user taps on close all inactive tabs button
        static let inactiveTabsCloseAllBtn = CounterMetricType( // generated from inactive_tabs_tray.inactive_tabs_close_all_btn
            CommonMetricData(
                category: "inactive_tabs_tray",
                name: "inactive_tabs_close_all_btn",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Recorded when a user taps on an inactive tab
        static let openInactiveTab = CounterMetricType( // generated from inactive_tabs_tray.open_inactive_tab
            CommonMetricData(
                category: "inactive_tabs_tray",
                name: "open_inactive_tab",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Counts the number of times user toggle (expand or collapse)
        /// inactive tab section.
        static let toggleInactiveTabTray = EventMetricType<ToggleInactiveTabTrayExtra>( // generated from inactive_tabs_tray.toggle_inactive_tab_tray
            CommonMetricData(
                category: "inactive_tabs_tray",
                name: "toggle_inactive_tab_tray",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["toggle_type"]
        )

    }

    enum TabsPanel {
        struct DoneButtonTappedExtra: EventExtras {
            var mode: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let mode = self.mode {
                    record["mode"] = String(mode)
                }

                return record
            }
        }

        struct NewTabButtonTappedExtra: EventExtras {
            var mode: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let mode = self.mode {
                    record["mode"] = String(mode)
                }

                return record
            }
        }

        struct TabClosedExtra: EventExtras {
            var mode: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let mode = self.mode {
                    record["mode"] = String(mode)
                }

                return record
            }
        }

        struct TabModeSelectedExtra: EventExtras {
            var mode: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let mode = self.mode {
                    record["mode"] = String(mode)
                }

                return record
            }
        }

        struct TabSelectedExtra: EventExtras {
            var mode: String?
            var selectedTabIndex: Int32?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let mode = self.mode {
                    record["mode"] = String(mode)
                }
                if let selectedTabIndex = self.selectedTabIndex {
                    record["selected_tab_index"] = String(selectedTabIndex)
                }

                return record
            }
        }

        /// Recorded when a user taps the done button to close the tabs panel.
        static let doneButtonTapped = EventMetricType<DoneButtonTappedExtra>( // generated from tabs_panel.done_button_tapped
            CommonMetricData(
                category: "tabs_panel",
                name: "done_button_tapped",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["mode"]
        )

        /// Recorded when the user taps the button in the tabs panel to open a new
        /// tab.
        static let newTabButtonTapped = EventMetricType<NewTabButtonTappedExtra>( // generated from tabs_panel.new_tab_button_tapped
            CommonMetricData(
                category: "tabs_panel",
                name: "new_tab_button_tapped",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["mode"]
        )

        /// Recorded when a user closes an open tab via tapping the x or
        /// swiping closed.
        static let tabClosed = EventMetricType<TabClosedExtra>( // generated from tabs_panel.tab_closed
            CommonMetricData(
                category: "tabs_panel",
                name: "tab_closed",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["mode"]
        )

        /// Recorded when the user changes the tabs panel mode with the segmented
        /// control in the tabs panel.
        static let tabModeSelected = EventMetricType<TabModeSelectedExtra>( // generated from tabs_panel.tab_mode_selected
            CommonMetricData(
                category: "tabs_panel",
                name: "tab_mode_selected",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["mode"]
        )

        /// Recorded when a user selects a tab in the tabs panel.
        static let tabSelected = EventMetricType<TabSelectedExtra>( // generated from tabs_panel.tab_selected
            CommonMetricData(
                category: "tabs_panel",
                name: "tab_selected",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["mode", "selected_tab_index"]
        )

    }

    enum TabsPanelCloseAllTabsSheet {
        struct OptionSelectedExtra: EventExtras {
            var mode: String?
            var option: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let mode = self.mode {
                    record["mode"] = String(mode)
                }
                if let option = self.option {
                    record["option"] = String(option)
                }

                return record
            }
        }

        /// Recorded when the user taps an option in the close all tabs sheet.
        static let optionSelected = EventMetricType<OptionSelectedExtra>( // generated from tabs_panel.close_all_tabs_sheet.option_selected
            CommonMetricData(
                category: "tabs_panel.close_all_tabs_sheet",
                name: "option_selected",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["mode", "option"]
        )

    }

    enum TabsPanelCloseOldTabsSheet {
        struct OptionSelectedExtra: EventExtras {
            var period: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let period = self.period {
                    record["period"] = String(period)
                }

                return record
            }
        }

        /// Recorded when the user taps an option in the close old tabs sheet.
        static let optionSelected = EventMetricType<OptionSelectedExtra>( // generated from tabs_panel.close_old_tabs_sheet.option_selected
            CommonMetricData(
                category: "tabs_panel.close_old_tabs_sheet",
                name: "option_selected",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["period"]
        )

    }

    enum TabsTray {
        struct PrivateBrowsingIconTappedExtra: EventExtras {
            var action: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let action = self.action {
                    record["action"] = String(action)
                }

                return record
            }
        }

        /// A user opened a new private tab from the tab tray
        static let newPrivateTabTapped = EventMetricType<NoExtras>( // generated from tabs_tray.new_private_tab_tapped
            CommonMetricData(
                category: "tabs_tray",
                name: "new_private_tab_tapped",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// A user has tapped on the private browsing icon in tabs tray.
        static let privateBrowsingIconTapped = EventMetricType<PrivateBrowsingIconTappedExtra>( // generated from tabs_tray.private_browsing_icon_tapped
            CommonMetricData(
                category: "tabs_tray",
                name: "private_browsing_icon_tapped",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["action"]
        )

    }

    enum ToastsCloseAllTabs {
        /// Records when the user selects undo after closing all tabs.
        static let undoTapped = EventMetricType<NoExtras>( // generated from toasts.close_all_tabs.undo_tapped
            CommonMetricData(
                category: "toasts.close_all_tabs",
                name: "undo_tapped",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

    }

    enum ToastsCloseSingleTab {
        /// Records when the user selects undo after closing a tab.
        static let undoTapped = EventMetricType<NoExtras>( // generated from toasts.close_single_tab.undo_tapped
            CommonMetricData(
                category: "toasts.close_single_tab",
                name: "undo_tapped",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

    }

    enum Awesomebar {
        struct LocationExtra: EventExtras {
            var location: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let location = self.location {
                    record["location"] = String(location)
                }

                return record
            }
        }

        struct SearchResultImpressionExtra: EventExtras {
            var type: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let type = self.type {
                    record["type"] = String(type)
                }

                return record
            }
        }

        struct SearchResultTapExtra: EventExtras {
            var type: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let type = self.type {
                    record["type"] = String(type)
                }

                return record
            }
        }

        /// Records when dragging the location bar
        static let dragLocationBar = EventMetricType<NoExtras>( // generated from awesomebar.drag_location_bar
            CommonMetricData(
                category: "awesomebar",
                name: "drag_location_bar",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// Records location of awesome bar when
        /// user opens the app
        static let location = EventMetricType<LocationExtra>( // generated from awesomebar.location
            CommonMetricData(
                category: "awesomebar",
                name: "location",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["location"]
        )

        /// The time a query against awesomebar took. This helps us understand the
        /// performance of the awesomebar in querying history and bookmarks. The query time
        /// will also help us verify that we are **not** introducing any performance
        /// regressions.
        static let queryTime = TimingDistributionMetricType( // generated from awesomebar.query_time
            CommonMetricData(
                category: "awesomebar",
                name: "query_time",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
            , .millisecond
        )

        /// Recorded for an item that was visible in the list of search results
        /// when the user finished interacting with the awesomebar.
        static let searchResultImpression = EventMetricType<SearchResultImpressionExtra>( // generated from awesomebar.search_result_impression
            CommonMetricData(
                category: "awesomebar",
                name: "search_result_impression",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["type"]
        )

        /// Record type of search item tap from the
        /// list of results of awesomebar search.
        static let searchResultTap = EventMetricType<SearchResultTapExtra>( // generated from awesomebar.search_result_tap
            CommonMetricData(
                category: "awesomebar",
                name: "search_result_tap",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["type"]
        )

        /// Counts the number of times a user taps share
        /// button on the awesomebar
        static let shareButtonTapped = EventMetricType<NoExtras>( // generated from awesomebar.share_button_tapped
            CommonMetricData(
                category: "awesomebar",
                name: "share_button_tapped",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

    }

    enum Toolbar {
        struct AppMenuButtonTappedExtra: EventExtras {
            var isPrivate: Bool?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let isPrivate = self.isPrivate {
                    record["is_private"] = String(isPrivate)
                }

                return record
            }
        }

        struct BackButtonTappedExtra: EventExtras {
            var isPrivate: Bool?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let isPrivate = self.isPrivate {
                    record["is_private"] = String(isPrivate)
                }

                return record
            }
        }

        struct BackLongPressExtra: EventExtras {
            var isPrivate: Bool?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let isPrivate = self.isPrivate {
                    record["is_private"] = String(isPrivate)
                }

                return record
            }
        }

        struct ClearSearchButtonTappedExtra: EventExtras {
            var isPrivate: Bool?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let isPrivate = self.isPrivate {
                    record["is_private"] = String(isPrivate)
                }

                return record
            }
        }

        struct DataClearanceButtonTappedExtra: EventExtras {
            var isPrivate: Bool?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let isPrivate = self.isPrivate {
                    record["is_private"] = String(isPrivate)
                }

                return record
            }
        }

        struct ForwardButtonTappedExtra: EventExtras {
            var isPrivate: Bool?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let isPrivate = self.isPrivate {
                    record["is_private"] = String(isPrivate)
                }

                return record
            }
        }

        struct ForwardLongPressExtra: EventExtras {
            var isPrivate: Bool?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let isPrivate = self.isPrivate {
                    record["is_private"] = String(isPrivate)
                }

                return record
            }
        }

        struct HomeButtonTappedExtra: EventExtras {
            var isPrivate: Bool?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let isPrivate = self.isPrivate {
                    record["is_private"] = String(isPrivate)
                }

                return record
            }
        }

        struct OneTapNewTabButtonTappedExtra: EventExtras {
            var isPrivate: Bool?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let isPrivate = self.isPrivate {
                    record["is_private"] = String(isPrivate)
                }

                return record
            }
        }

        struct OneTapNewTabLongPressExtra: EventExtras {
            var isPrivate: Bool?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let isPrivate = self.isPrivate {
                    record["is_private"] = String(isPrivate)
                }

                return record
            }
        }

        struct QrScanButtonTappedExtra: EventExtras {
            var isPrivate: Bool?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let isPrivate = self.isPrivate {
                    record["is_private"] = String(isPrivate)
                }

                return record
            }
        }

        struct ReaderModeButtonTappedExtra: EventExtras {
            var enabled: Bool?
            var isPrivate: Bool?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let enabled = self.enabled {
                    record["enabled"] = String(enabled)
                }
                if let isPrivate = self.isPrivate {
                    record["is_private"] = String(isPrivate)
                }

                return record
            }
        }

        struct RefreshButtonTappedExtra: EventExtras {
            var isPrivate: Bool?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let isPrivate = self.isPrivate {
                    record["is_private"] = String(isPrivate)
                }

                return record
            }
        }

        struct SearchButtonTappedExtra: EventExtras {
            var isPrivate: Bool?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let isPrivate = self.isPrivate {
                    record["is_private"] = String(isPrivate)
                }

                return record
            }
        }

        struct ShareButtonTappedExtra: EventExtras {
            var isPrivate: Bool?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let isPrivate = self.isPrivate {
                    record["is_private"] = String(isPrivate)
                }

                return record
            }
        }

        struct SiteInfoButtonTappedExtra: EventExtras {
            var isPrivate: Bool?
            var isToolbar: Bool?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let isPrivate = self.isPrivate {
                    record["is_private"] = String(isPrivate)
                }
                if let isToolbar = self.isToolbar {
                    record["is_toolbar"] = String(isToolbar)
                }

                return record
            }
        }

        struct TabTrayButtonTappedExtra: EventExtras {
            var isPrivate: Bool?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let isPrivate = self.isPrivate {
                    record["is_private"] = String(isPrivate)
                }

                return record
            }
        }

        struct TabTrayLongPressExtra: EventExtras {
            var isPrivate: Bool?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let isPrivate = self.isPrivate {
                    record["is_private"] = String(isPrivate)
                }

                return record
            }
        }

        /// Counts the number of times a user taps the menu button
        /// in the address or navigation toolbar
        static let appMenuButtonTapped = EventMetricType<AppMenuButtonTappedExtra>( // generated from toolbar.app_menu_button_tapped
            CommonMetricData(
                category: "toolbar",
                name: "app_menu_button_tapped",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["is_private"]
        )

        /// Counts the number of times a user taps the back button
        /// in the address or navigation toolbar
        static let backButtonTapped = EventMetricType<BackButtonTappedExtra>( // generated from toolbar.back_button_tapped
            CommonMetricData(
                category: "toolbar",
                name: "back_button_tapped",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["is_private"]
        )

        /// Counts the number of times a user long presses the back button
        /// in the address or navigation toolbar
        static let backLongPress = EventMetricType<BackLongPressExtra>( // generated from toolbar.back_long_press
            CommonMetricData(
                category: "toolbar",
                name: "back_long_press",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["is_private"]
        )

        /// Counts the number of times a user taps the clear button
        /// in the address toolbar
        static let clearSearchButtonTapped = EventMetricType<ClearSearchButtonTappedExtra>( // generated from toolbar.clear_search_button_tapped
            CommonMetricData(
                category: "toolbar",
                name: "clear_search_button_tapped",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["is_private"]
        )

        /// Counts the number of times a user taps the data clearance
        /// button in the address or navigation toolbar
        static let dataClearanceButtonTapped = EventMetricType<DataClearanceButtonTappedExtra>( // generated from toolbar.data_clearance_button_tapped
            CommonMetricData(
                category: "toolbar",
                name: "data_clearance_button_tapped",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["is_private"]
        )

        /// Counts the number of times a user taps the forward button
        /// in the address or navigation toolbar
        static let forwardButtonTapped = EventMetricType<ForwardButtonTappedExtra>( // generated from toolbar.forward_button_tapped
            CommonMetricData(
                category: "toolbar",
                name: "forward_button_tapped",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["is_private"]
        )

        /// Counts the number of times a user long presses the forward button
        /// in the address or navigation toolbar
        static let forwardLongPress = EventMetricType<ForwardLongPressExtra>( // generated from toolbar.forward_long_press
            CommonMetricData(
                category: "toolbar",
                name: "forward_long_press",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["is_private"]
        )

        /// Counts the number of times a user taps the home button
        /// in the address or navigation toolbar
        static let homeButtonTapped = EventMetricType<HomeButtonTappedExtra>( // generated from toolbar.home_button_tapped
            CommonMetricData(
                category: "toolbar",
                name: "home_button_tapped",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["is_private"]
        )

        /// Counts the number of times a user taps the one tap new tab
        /// button in the address or navigation toolbar
        static let oneTapNewTabButtonTapped = EventMetricType<OneTapNewTabButtonTappedExtra>( // generated from toolbar.one_tap_new_tab_button_tapped
            CommonMetricData(
                category: "toolbar",
                name: "one_tap_new_tab_button_tapped",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["is_private"]
        )

        /// Counts the number of times a user long presses the one
        /// tap new tab button in the address or navigation toolbar
        static let oneTapNewTabLongPress = EventMetricType<OneTapNewTabLongPressExtra>( // generated from toolbar.one_tap_new_tab_long_press
            CommonMetricData(
                category: "toolbar",
                name: "one_tap_new_tab_long_press",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["is_private"]
        )

        /// Counts the number of times a user taps the qr code scan button
        /// in the address toolbar
        static let qrScanButtonTapped = EventMetricType<QrScanButtonTappedExtra>( // generated from toolbar.qr_scan_button_tapped
            CommonMetricData(
                category: "toolbar",
                name: "qr_scan_button_tapped",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["is_private"]
        )

        /// Counts the number of times a user taps the reader mode button
        /// in the address toolbar
        static let readerModeButtonTapped = EventMetricType<ReaderModeButtonTappedExtra>( // generated from toolbar.reader_mode_button_tapped
            CommonMetricData(
                category: "toolbar",
                name: "reader_mode_button_tapped",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["enabled", "is_private"]
        )

        /// Counts the number of times a user taps the refresh button
        /// in the address toolbar
        static let refreshButtonTapped = EventMetricType<RefreshButtonTappedExtra>( // generated from toolbar.refresh_button_tapped
            CommonMetricData(
                category: "toolbar",
                name: "refresh_button_tapped",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["is_private"]
        )

        /// Counts the number of times a user taps the search button
        /// in the address or navigation toolbar
        static let searchButtonTapped = EventMetricType<SearchButtonTappedExtra>( // generated from toolbar.search_button_tapped
            CommonMetricData(
                category: "toolbar",
                name: "search_button_tapped",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["is_private"]
        )

        /// Counts the number of times a user taps the share button
        /// in the address toolbar
        static let shareButtonTapped = EventMetricType<ShareButtonTappedExtra>( // generated from toolbar.share_button_tapped
            CommonMetricData(
                category: "toolbar",
                name: "share_button_tapped",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["is_private"]
        )

        /// Counts the number of times a user taps the site info button
        /// in the address toolbar
        static let siteInfoButtonTapped = EventMetricType<SiteInfoButtonTappedExtra>( // generated from toolbar.site_info_button_tapped
            CommonMetricData(
                category: "toolbar",
                name: "site_info_button_tapped",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["is_private", "is_toolbar"]
        )

        /// Counts the number of times a user taps the tab tray button
        /// in the address or navigation toolbar
        static let tabTrayButtonTapped = EventMetricType<TabTrayButtonTappedExtra>( // generated from toolbar.tab_tray_button_tapped
            CommonMetricData(
                category: "toolbar",
                name: "tab_tray_button_tapped",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["is_private"]
        )

        /// Counts the number of times a user long presses the tab tray
        /// button in the address or navigation toolbar
        static let tabTrayLongPress = EventMetricType<TabTrayLongPressExtra>( // generated from toolbar.tab_tray_long_press
            CommonMetricData(
                category: "toolbar",
                name: "tab_tray_long_press",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["is_private"]
        )

    }

    enum TrackingProtection {
        struct EtpSettingChangedExtra: EventExtras {
            var etpEnabled: Bool?
            var etpSetting: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let etpEnabled = self.etpEnabled {
                    record["etp_enabled"] = String(etpEnabled)
                }
                if let etpSetting = self.etpSetting {
                    record["etp_setting"] = String(etpSetting)
                }

                return record
            }
        }

        /// Records when the enhanced tracking protection panel is dismissed
        static let dismissEtpPanel = EventMetricType<NoExtras>( // generated from tracking_protection.dismiss_etp_panel
            CommonMetricData(
                category: "tracking_protection",
                name: "dismiss_etp_panel",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// Measures the state of the tracking-protection enabled
        /// preference.
        static let enabled = BooleanMetricType( // generated from tracking_protection.enabled
            CommonMetricData(
                category: "tracking_protection",
                name: "enabled",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// A user changed their tracking protection
        /// level setting to either strict or standard
        static let etpSettingChanged = EventMetricType<EtpSettingChangedExtra>( // generated from tracking_protection.etp_setting_changed
            CommonMetricData(
                category: "tracking_protection",
                name: "etp_setting_changed",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["etp_enabled", "etp_setting"]
        )

        /// Records when the certificates screen from the enhanced tracking protection
        /// panel is shown
        static let showCertificates = EventMetricType<NoExtras>( // generated from tracking_protection.show_certificates
            CommonMetricData(
                category: "tracking_protection",
                name: "show_certificates",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// Records when the clear cookies alert is shown
        static let showClearCookiesAlert = EventMetricType<NoExtras>( // generated from tracking_protection.show_clear_cookies_alert
            CommonMetricData(
                category: "tracking_protection",
                name: "show_clear_cookies_alert",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// Records when the enhanced tracking protection blocked trackers details screen
        /// is shown
        static let showEtpBlockedTrackersDetails = EventMetricType<NoExtras>( // generated from tracking_protection.show_etp_blocked_trackers_details
            CommonMetricData(
                category: "tracking_protection",
                name: "show_etp_blocked_trackers_details",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// Records when the enhanced tracking protection details screen is shown
        static let showEtpDetails = EventMetricType<NoExtras>( // generated from tracking_protection.show_etp_details
            CommonMetricData(
                category: "tracking_protection",
                name: "show_etp_details",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// Records when the enhanced tracking protection settings screen is shown
        static let showEtpSettings = EventMetricType<NoExtras>( // generated from tracking_protection.show_etp_settings
            CommonMetricData(
                category: "tracking_protection",
                name: "show_etp_settings",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// A string representing the selected strength of the
        /// tracking-protection that is enabled. One of:
        /// * basic
        /// * strict
        static let strength = StringMetricType( // generated from tracking_protection.strength
            CommonMetricData(
                category: "tracking_protection",
                name: "strength",
                sendInPings: ["metrics"],
                lifetime: .ping,
                disabled: false
            )
        )

        /// Records when the clear cookies button from the etp alert is tapped.
        static let tappedClearCookies = EventMetricType<NoExtras>( // generated from tracking_protection.tapped_clear_cookies
            CommonMetricData(
                category: "tracking_protection",
                name: "tapped_clear_cookies",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

    }

    enum UserClientAssociation {
        /// The Mozilla Account UID associated with the user.
        /// 
        /// Owner: @jdavis
        static let uid = StringMetricType( // generated from user.client_association.uid
            CommonMetricData(
                category: "user.client_association",
                name: "uid",
                sendInPings: ["fx-accounts"],
                lifetime: .ping,
                disabled: false
            )
        )

    }

    enum ZoomBar {
        struct ZoomInButtonTappedExtra: EventExtras {
            var level: Int32?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let level = self.level {
                    record["level"] = String(level)
                }

                return record
            }
        }

        struct ZoomOutButtonTappedExtra: EventExtras {
            var level: Int32?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let level = self.level {
                    record["level"] = String(level)
                }

                return record
            }
        }

        /// Records when the user taps the close button to close the zoom bar.
        static let closeButtonTapped = EventMetricType<NoExtras>( // generated from zoom_bar.close_button_tapped
            CommonMetricData(
                category: "zoom_bar",
                name: "close_button_tapped",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// Records when the user taps the current zoom percentage to reset the zoom
        /// level in the zoom bar. This will cause the current webpage to reset
        /// back to the default 100% zoom level.
        static let resetButtonTapped = EventMetricType<NoExtras>( // generated from zoom_bar.reset_button_tapped
            CommonMetricData(
                category: "zoom_bar",
                name: "reset_button_tapped",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , []
        )

        /// Records when the user taps the zoom in button in the zoom bar.
        /// This will cause the current webpage to zoom in.
        static let zoomInButtonTapped = EventMetricType<ZoomInButtonTappedExtra>( // generated from zoom_bar.zoom_in_button_tapped
            CommonMetricData(
                category: "zoom_bar",
                name: "zoom_in_button_tapped",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["level"]
        )

        /// Records when the user taps the zoom out button in the zoom bar.
        /// This will cause the current webpage to zoom out.
        static let zoomOutButtonTapped = EventMetricType<ZoomOutButtonTappedExtra>( // generated from zoom_bar.zoom_out_button_tapped
            CommonMetricData(
                category: "zoom_bar",
                name: "zoom_out_button_tapped",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["level"]
        )

    }

}
